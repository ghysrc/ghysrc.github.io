<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ghysrc.github.io</id>
    <title>PM海洋</title>
    <updated>2020-03-24T08:16:12.390Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ghysrc.github.io"/>
    <link rel="self" href="https://ghysrc.github.io/atom.xml"/>
    <subtitle>Just do better</subtitle>
    <logo>https://ghysrc.github.io/images/avatar.png</logo>
    <icon>https://ghysrc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, PM海洋</rights>
    <entry>
        <title type="html"><![CDATA[Scrum 敏捷开发]]></title>
        <id>https://ghysrc.github.io/post/ScrumGuide/</id>
        <link href="https://ghysrc.github.io/post/ScrumGuide/">
        </link>
        <updated>2020-03-20T03:08:50.000Z</updated>
        <content type="html"><![CDATA[<p>软件行业开发工作中最常用的工作方式就是瀑布式开发，严格遵循预先计划的需求分析、概要设计、详细设计、编码实现、测试验证等步骤顺序进行。虽然每一步都有阶段性的成果，比如文档、设计稿，但除非走完整个流程，否则就没有任何可以交付的成果，也就没有任何的商业价值。</p>
<p>后来敏捷开发出现了，找工作的时候都会被问到什么是敏捷开发，但很多公司仍然是没有真正实施的，只是看起来像。有公司在墙上做一个看板贴上便签就认为是敏捷，有公司强制规定每两周更新一次版本就认为是敏捷，有公司每天早上开站会也认为是敏捷。之所以会这样，是因为敏捷开发的理论需要学习，敏捷开发的实施需要训练。不去学习理论就会想当然的认为敏捷开发只是一种形式，而实施遇到困难就会轻易回到瀑布式开发。</p>
<h2 id="1-什么是敏捷什么是-scrum">1、什么是敏捷？什么是 Scrum？</h2>
<p>Scrum 经常是和敏捷一起出现的，在我没去学习之前，我一直以为 Scrum = 敏捷，因为我不认识这个单词，想当然的下结论。</p>
<p><strong>敏捷软件开发</strong>（Agile software development），是一种从1990年代开始逐渐引起广泛关注的新型软件开发方法，是一种能应对快速变化需求的软件开发能力。</p>
<p><strong>Scrum</strong> 是一个敏捷开发的框架，在此框架中人们可以解决复杂的自适应难题，同时也能高效并创造性地交付可能最高价值的产品。</p>
<p>也就是说，敏捷开发是一种理论指导，Scrum 是该理论下的一种具体的实现方式，我们经常提到的看板，也是敏捷开发的一种框架。</p>
<h2 id="2-组建一个-scrum-团队">2、组建一个 Scrum 团队</h2>
<p>Scrum 团队由一名产品负责人、开发团队和一名 Scrum Master 组成。Scrum 团队是跨职能的自组织团队。自组织团队自己选择如何以最好的方式完成工作，而不是由团队之外的人来指导。跨职能团队拥有完成工作所需的全部技能，不需要依赖团队之外的人。</p>
<h3 id="21-产品负责人">2.1 产品负责人</h3>
<p>产品负责人的职责是将开发团队开发的产品价值最大化。这个人必须知道自己带领的团队需要做什么、制造什么产品以及取得什么成果，必须全面考虑到风险与回报、什么具有可行性、什么能做以及他们对什么富有热情。</p>
<h3 id="22-开发团队">2.2 开发团队</h3>
<p>真正做事的是谁？这个团队必须能够落实产品负责人的愿景。包含各种专业人员，负责在每个 Sprint 结束时交付潜在可发布并且“完成”的产品增量。团队规模宜小不宜大，一般3~9人较为合适。</p>
<h3 id="23-scrum-master">2.3 Scrum Master</h3>
<p>Scrum Master 帮助每个人理解 Scrum 理论、实践、规则和价值，确保Scrum得到正确运用，帮助团队消除一切障碍。</p>
<h2 id="3-scrum-做些什么">3、Scrum 做些什么</h2>
<p>一个粗略的 Scrum 流程大概可以分为以下步骤：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/20-10-16-42-scrum.png" alt="scrum.png" loading="lazy"></figure>
<h3 id="31-产品待办列表">3.1  产品待办列表</h3>
<p>在 Scrum 框架中这个清单叫 backlog，官方《Scrum 指南》把它翻译成了产品待办列表，相关的书也就都跟着这个翻译走的，其实也类似于需求清单吧。它是由用户需求或故事组成的一个列表，按照重要性进行排序。一个产品只能有一个需求清单，拥有多个产品经理时，产品经理都可以往清单里面添加需求，但评估需求重要性的只能是产品负责人。</p>
<p>一个普通的 backlog 包含：</p>
<ul>
<li>
<p>ID：统一标识符，可以是自增长的数字，避免重复</p>
</li>
<li>
<p>需求名：简短的描述需求</p>
</li>
<li>
<p>优先级：产品负责人对需求优先级的评估结果。不建议使用固定的分级，如1-5，可以使用较大的数字，便于在优先级之间插入新的需求。要注意优先级是用来排序的，并不能代表优先级为10的需求比优先级2的需求重要 5 倍。</p>
</li>
<li>
<p>初步估值：团队对需求所需工作量的初步估算。单位为一个理想的“人/天”。不需要强求估值的绝对准确，而要尽量的保证需求之间的估值相对准确。</p>
</li>
<li>
<p>如何演示：定义一个需求完成后，如何证明它被完成了。比如一套操作流程，还是一份测试报告</p>
</li>
<li>
<p>需求类别：需求属于的分类，分类方式根据团队和产品的不同来划分</p>
</li>
<li>
<p>需求来源：也就是谁提出的需求，便于沟通和反馈</p>
</li>
<li>
<p>备注：其他信息</p>
</li>
</ul>
<h3 id="32-制定冲刺计划">3.2 制定冲刺计划</h3>
<p>冲刺是由 Scrum 框架中 sprint 翻译来的，类似于一个小的增量迭代周期。冲刺周期在 Scrum 团队中一般是固定的，可能是 1-4 周。整个团队要从需求清单的顶端着手（即从最重要的需求着手），评估在一个冲刺中能完成多少。</p>
<p><strong>1、预估团队可完成点数</strong></p>
<p>我们把一个理想的“人/天”称为一个“点”，在真实的工作中，开发团队不可能达到理想化，有人可能会请假，有人可能犯错误，以理想化去估算，那造成的结果肯定是延期发布。我们可以通过考虑几个因素来得出开发团队在一个冲刺周期内的实际可完成的点数。</p>
<ol>
<li>
<p>假设开发团队共有 4 人，一个冲刺周期为 3 周，那理想情况下，可以完成 60 个点；</p>
</li>
<li>
<p>但已经预先知道，其中有人会请假，去除掉请假消耗的点，还剩 50 个点；</p>
</li>
<li>
<p>在真实工作中，难免因为其他因素而影响到工作效率，比如无休止的会议。50 个点中真实可完成的有多少，就要考虑团队的开发效率：可完成点数 = 可用点数 x 开发效率；</p>
</li>
<li>
<p>开发效率可以使用之前的冲刺结果得出平均的开发效率：过去的开发效率 = 过去的完成点数 / 过去的可用点数，假设为 64%；</p>
</li>
<li>
<p>那开发团队在一个为期 3 周的冲刺周期中，去除成员不在岗的时间，可完成点数 = 可用点数(50) x 平均开发效率(64%)  = 32 个点；</p>
</li>
</ol>
<p>估算可完成的点数并不是去适应开发团队，开发团队能完成多少就规划多少。而是去认识到开发效率的存在和影响，当开发效率过低时，就要针对性的找方法去调高开发效率。一个优秀的 Scrum 团队，开发效率肯定不会是低的。</p>
<p><strong>2、确定冲刺任务</strong></p>
<p>已经知道了团队能完成多少个点，那就从需求清单的顶部拿出点数相符或接近的需求，加入到冲刺任务中。</p>
<p>因为每次冲刺都是要尽量完成一个可发布的版本，有些需求可能就需要打包在一起，从而导致跟团队在周期内可完成的点数对不上的问题。</p>
<p>这时就需要根据实际情况，去提高冲刺周期可完成点数，或者降低冲刺任务的难度，去避免无法按时交付或完成之类太低的问题。</p>
<p>确定好冲刺周期内的任务，就可以把任务卡片贴到墙上，大的卡片代表一个用户需求，小的卡片是开发团队为了完成整个需求要做的任务。</p>
<h3 id="33-更新冲刺进度">3.3 更新冲刺进度</h3>
<ul>
<li>
<p>及时更新开发任务和用户需求的状态</p>
</li>
<li>
<p>通过每日例会共享昨天完成的和今天要做的，以及同步遇到的问题</p>
</li>
<li>
<p>Scrum Master 每天根据团队完成情况来更新任务燃尽图，通过图表每个人一眼就可以看到当前是否落后于进度</p>
</li>
<li>
<p>如果进度提前很多，产品负责人可以把其他需求加入到当前的冲刺周期</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/20-10-44-31-scrum-board-678x381.png" alt="scrum-board-678x381.png" loading="lazy"></figure>
<h3 id="34-评审和回顾">3.4 评审和回顾</h3>
<p>对于一个需求，开发团队的完成和产品负责人的完成也许是有差异的，除了在冲刺规划会议上，产品负责人要让每个人明确完成的定义，还要早开发团队完成后进行评审，也是需求清单中的如何演示。评审可以让每个人看到团队努力的成果，也可以得到需求的相关人员反馈，以便及时调整。</p>
<p>Scrum 鼓励尝试和变化，一个冲刺完成后，团队可以分享各自认为冲刺周期内感觉比较好的地方，也可以挑出其中不好的地方。经过反复的调整和优化，来找到最适合自己团队的方式。</p>
<h2 id="4-总结">4、总结</h2>
<p>这篇文章大部分的内容总结于《Scrum 指南》和《硝烟中的Scrum和XP》，其中还包含了更多的内容和细节，有兴趣的推荐读一读。</p>
<p>Scrum 实践起来还是有不少的难度，很多人都习惯了瀑布式开发，瀑布式开发就是他们的舒适区。而且 Scrum 有学习和实施成本，很多团队也不愿意花时间去尝试。但 Scrum 从出现到现在已经有快 30 年了，也早已被很多企业认可并实施多年，是被反复证明有效的敏捷开发框架，有机会的话值得去试着应用到自己的团队中。</p>
<p>最后附上《Scrum 指南》的下载地址：<a href="https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Chinese-Simplified.pdf">2017中文版</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你当像鸟飞往你的山]]></title>
        <id>https://ghysrc.github.io/post/Educated/</id>
        <link href="https://ghysrc.github.io/post/Educated/">
        </link>
        <updated>2020-03-17T01:41:02.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/17-08-16-53-s33492346.jpg" alt="s33492346.jpg" loading="lazy"></figure>
<p>我读书一般都是功利性的，带着获取某种知识的目的去读，要学移动端开发我从《Android 开发入门》读起，要做产品经理我从《人人都是产品经理》读起，要学习理财我从《富爸爸穷爸爸》读起...所以我基本没读过什么小说，我认为只是看完了一个故事而已，能得到什么呢？</p>
<p>读这本书自然是因为比尔盖茨的书单，而且评分又极高，它的英文名和翻译也让我很好奇，为什么“Educated”会翻译成“你当像鸟飞往你的山”？断断续续的每天读几小节，直到昨晚睡觉前我读完了，我理解了“Educated”和“你当像鸟飞往你的山”的含义。</p>
<h2 id="1-educated">1、Educated</h2>
<p>我不确定 Educated 的最佳翻译是什么，但应该类似于“受教育”的意思吧。与标题相反的是，作者在十七岁之前，没有上过学。她和她的兄弟姐妹一样，接受的都是“家庭教育”。在她父亲的观念中，学校是政府用来给年轻人洗脑的，医院只会害人不会救人。</p>
<p>作者每一天的生活都是从给父亲干活开始，在山上的废料场做各种杂活。在这个废料场上，有人断过腿，有人身上着过火，作者只是几次轻伤已是幸运。晚上一边帮母亲调制草药和精油，一边听着父亲赞美上帝、憎恨政府。</p>
<p>她父亲在我看来就是一个宗教信仰的独裁者，以宗教信仰的名义，对家庭中的每一个人进行完全的控制，不跟从他的信仰的人，都是异教徒。穿漏出胳膊的衣服就是不端庄，去上学就是背叛家人，只有作者在教堂唱歌的时候，他才表现的像一个父亲。</p>
<p>在这种环境下，她的一个哥哥也变成了一个暴君。父亲给她的是精神上的折磨，而她哥哥则经常实施暴力行为，都仅仅是因为作者表现出了一丁点的不认同。</p>
<p>读前面这部分时，我很难把这个环境中的作者与历史学博士的作者联系起来。我想象过中国部分山区的穷苦，我也偶然在新闻上看过那里儿童的艰辛，但这种精神上的压迫和控制，我想象不来，更体会不到。</p>
<p>我的父母也有迷信的时候，如果不是读这本书，我可能就不会想起来了。中学时某天早上，父母神秘的把我带到一个盲婆婆的家里，给我算命。然后就听了一堆模棱两可的话，完全取决于听的人想怎么理解。当时我是很反感的，所幸父母之后就没有类似的行为了，最多也只是偶尔庙里为我求个符，希望我平安。</p>
<p>大部分人在作者的处境中，至少我自己，大概率是会沉沦的。我想象不到作者需要多少勇气才能在那种环境中做个“异类”，又付出了多少努力在那种环境中持续的学习。而改变这一切的正是学习，通过学习逃离了大山，通过学习看到了真实的世界，通过学习认识了真正的自我。</p>
<h2 id="2-你当像鸟飞往你的山">2、你当像鸟飞往你的山</h2>
<p>这句话出自圣经，是作者钦定的中文译名，关于这个译名都有一个故事。开始的方案是直接英译中，但类似《教育的力量》太像成功学；后来各种查找找到了圣经中“你当像鸟飞往你的山”，但作者拒绝了；最后又回到英译中的方案时，作者改变了注意，决定使用“你当像鸟飞往你的山”。</p>
<p>对于作者来说，她十七岁之前一直生活在叫巴克峰的大山里，尽管她格格不入，被家人当做异类，但作者童年的那部分，就一直留在了大山中。而另外一部分的自己，挣脱了大山的束缚，像飞鸟一样寻找到了属于自己的山。</p>
<p>对于我们来说，我们每个人或曾经或现在都在一座山上，这座山可能是我们自己找到的，但也有可能是别人给我们定义的。我们需要接受过去的自己，但不能被过去的自己所束缚。要有自由飞翔的意志，寻找到真正属于自己的山。</p>
<p>最后附上作者关于“教育”的一段话：</p>
<blockquote>
<p>教育意味着获得不同的视角，理解不同的人、经历和历史。接受教育，但不要让你的教育僵化成傲慢。教育应该是思想的拓展，同理心的深化，视野的开阔。它不应该使你的偏见变得更顽固。如果人们受过教育，他们应该变得不那么确定，而不是更确定。他们应该多听，少说，对差异满怀激情，热爱那些不同于他们的想法。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《社会性动物》- 意识社会影响]]></title>
        <id>https://ghysrc.github.io/post/TheSocialAnimal/</id>
        <link href="https://ghysrc.github.io/post/TheSocialAnimal/">
        </link>
        <updated>2020-03-14T07:47:41.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/16-13-30-36-s2783843.jpg" alt="s2783843.jpg" loading="lazy"></figure>
<p>读好书能使人增长知识，读好的社会心理学书能使人明理开智、洞察许多社会现象的奥秘。之前就尝试着去读《社会心理学》，但可能因为时间不多，刚开始读又很难读进去，加上那本书的印刷——每页字又小又多，逐渐就放弃了。现在强制宅家，避开《社会心理学》的阴影，读了这本被誉为“美国社会心理学圣经”的《社会性动物》。</p>
<p>社会心理学（social psychology）是指研究个体和群体在社会相互作用中的心理和行为发生及变化规律。这本书从个人与社会角度通过各类的实验和现实案例，讲述了各种行为背后的心理学原因。</p>
<p>我首先想说的是 <strong>后见之明偏见（hindsight bias）</strong>：一旦我们知道了一件事的结果，我们就强烈地倾向于（常常是错误地）认为我们可以在事先预见到它。</p>
<p>其实刚开始读这类书，很容易产生“这说的谁都知道”的想法，从而认为没必要读下去。这也可能就是作者为什么把这个概念放在了第一章，而不是标题就叫“偏见”的第七章。读这类书就需要首先意识到后见之明偏见对自己认知产生的影响，并且合理的控制它。我们去了解社会心理学不是为了知道各种结论，而是去了解那些结论是如何产生的，那些结论在现实中如何影响着我们，而我们又该如何应对。</p>
<h2 id="1-从众">1、从众</h2>
<p>看到这两个字我们很自然会想“早都知道了，人都是随大流的”，看到街上一家店排队人很多，很多人就会跟着排；宿舍的同学都在玩游戏，很多人也就跟着玩；网络上突然流行了一个梗，很多人就跟着刷...这些都是从众：由一个人或一个团体的真实的或是臆想的压力所引起的人的行为或观点的变化。但你真要去问那些跟风的人，大部分人都不认为自己是从众的人，从众的都是别人。</p>
<p>书中介绍形成从众的因素有：</p>
<ul>
<li>
<p>服从群体意见。开会时你可能有自己的想法，但其他人都表达了相反的想法，你也就更容易的放弃自己的想法。</p>
</li>
<li>
<p>服从“专家”。你有自己想法，但你更相信“专家”的想法，因为更有权威性。</p>
</li>
<li>
<p>自己无法判断。对于一件事你也不知道应该如何，那就跟着别人吧。</p>
</li>
<li>
<p>行为模仿。看别人都那样做，认为自己也可以。</p>
</li>
</ul>
<p>以我自己现实生活为例，我自认是一个有素质的人，公共场合绝不乱丢垃圾，没有垃圾桶的时候就先装到包里或口袋里，我也一直是这样做的。但就是个别情况，我看到一个角落里有一小堆垃圾，行为模仿就对我产生了影响，我的素质相关的意识变弱了，从众心理让我感觉自己也可以丢在那里。</p>
<h2 id="2-启发式判断">2、启发式判断</h2>
<p>我们是如何理解世界的？根据书中提到的研究，其实我们大部分的认知和决策都是不经过思考的。我们总是在竭力节省认知能量，考虑到我们有限的信息加工能力，我们总是试图采用简化复杂问题的战略。我们会通过几种方式来实现这个目的：(1)通过忽视一部分信息以减少我们的认知负担；(2)过度使用其他信息以避免寻找更多的信息；(3)接受一个不尽完美的选择，因为这已经足够好了。但这些方式会产生严重的错误和偏见。</p>
<p>比如书中提到的 <strong>启发式判断</strong>。启发式判断是一种思考上的捷径，是解决问题时寻找最简单、常见方案的策略。启发式判断可以分为三类：</p>
<ul>
<li>
<p>代表性启发，我们轻易的借鉴同类或不同类的经验来快速做出判断。我们一般认为价格高的就更好，所以淘宝上两件一模一样的衣服，我们会想当然的认为价格高的那件质量更好。</p>
</li>
<li>
<p>可用性启发，我们依赖于最先想到的信息和经验。我们判断一个人好与坏，很大程度上取决于我们优先想到对方做过的事情。也就是判断的依据是我们想到了什么，而不是完整的判断。</p>
</li>
<li>
<p>态度性启发，态度是储存起来的评价，无论单一事件的好坏。比如你讨厌一个同事，那对方的很多行为，在你看来都会是负面的</p>
</li>
</ul>
<p>这种快速判断的方式其实类似于偏见，作者在第七章独立的介绍了偏见相关的内容。偏见产生的原因就是刻板化，我们轻易的对人或事做出分类，把同一个特征归属于团队中的每个人，而不管团队成员之间的现实差异。</p>
<p>“你长这么高怎么不会打篮球？”这句话也许是玩笑，但确实出于偏见。</p>
<h2 id="3-认知不协调">3、认知不协调</h2>
<p>认知不协调（cognitive dissonance）是一种紧张状态。当一个人在心理上同时持有两种不一致的认知（思想、态度、信念、意见）时，就会产生这种紧张状态。而由于认知不协调是不愉快的，所以我们都会尽力的减少它，也就是为自己辩解。</p>
<p>发誓要减肥的人却要吃火锅，此时就产生了“我要减肥”和“我想吃火锅”的认知不协调，而减少不协调最简单的办法就是告诉自己“只吃一顿影响不大”，来支持自己的行为。</p>
<p>减少认知不协调是一种自我保护行为，保持一个正面的自我形成，但却妨碍了我们学习重要事实或发现解决问题的方法。</p>
<p>这种自我保护行为会产生很多负面的影响，比如 <strong>谴责受害者现象</strong>。自己伤害了一个无辜的人，此时就产生了“我是个好人”与“我伤害了对方”的认知不协调。此时减少不协调最简单的办法就是贬低对方，使得自己相信对方是罪有应得。</p>
<p>当自己被激怒时，往往会实施过分的伤害行为，也会产生不协调，类似于“他只是批评了我几句”和“我却摔东西了”，对方的伤害行为与自己的报复行为存在着强度差异，自己就要对这个差异做辩解。与谴责受害者类似，就会贬低对方。</p>
<p>以我自己为例还有决策后的不协调。我之前组装台式机时，经常对比各品牌的配件，这个性能好，那个更实用，我可以公正客观的看待两者的优缺点。但当我买了其中一个之后，我就只愿意看到它的正面评价，有意的躲避负面评价。因为那些负面评价会对我产生“我做了正确的决定”和“它有很多缺点”的认知不协调，我需要减少不协调来证明自己的决策正确。</p>
<h2 id="4-其他">4、其他</h2>
<p><strong>记忆重建</strong>。我们的记忆重建在经过过滤的真实生活的片段基础上，并通过对可能是什么和应该是什么的认识的修正而完成的。</p>
<p>我在看到这个的时候就想到了一步电影，前段时间上映的《误杀》。虽然我没看过，但我看过它翻拍的原版，印度电影《瞒天误杀记》。男主就是利用了这一点，对公交车售票员、电影院放映员、餐厅老板重建了“案发当日见过男主全家”的记忆，从而成功隐瞒了真相。</p>
<p><strong>喜欢的增减效应</strong>。你会更喜欢一个对你喜欢程度逐渐增加的人，大于一开始就很喜欢你的人；你会更讨厌一个对你喜欢程度逐渐降低的人，大于一开始就很讨厌你的人。</p>
<p><strong>错误的交流</strong>。人具有一种使用复杂的语言互相交流复杂信息的能力。同样的语言，略微不同的场景、不同的对象，加上自己不同的语调、表情，都会传达着不一样的信息，所以人与人之间的交流会轻易的被扭曲。而在竞争的社会里成长，在成长过程中我们大多数人已学会通过使自己无懈可击来保护自己。这样，当我们受到伤害时，我们就竭力不表现出来。这样做往往导致防御性的反应，或者导致迎头反击，于是争执逐步升级。</p>
<p><strong>有效的交流</strong>。培养明确的、坦率的、不怨天尤人的交流方法；培养勇于检查自己的行为和探究它对他人的影响的意愿；培养通过解决问题而不是通过强制或操纵来消除冲突和纠纷的能力。</p>
<h2 id="5-总结">5、总结</h2>
<p>社会心理学能让我看到我自己对社会影响的反应，以及提醒我去关注这些反应是如何产生的。从而意识到自己的从众心理，意识到那些为了减少认知不协调的行为，意识到自己对别人对事物有哪些偏见，让自己变得更加理智，做出更加正确的反应。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《游戏改变世界》- 游戏化]]></title>
        <id>https://ghysrc.github.io/post/RealityIsBroken/</id>
        <link href="https://ghysrc.github.io/post/RealityIsBroken/">
        </link>
        <updated>2020-03-06T09:58:21.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/11-17-57-40-s11136690.jpg" alt="s11136690.jpg" loading="lazy"></figure>
<p>说起游戏很多人都会谈虎色变，把游戏和沉迷上瘾关联起来，毕竟确实有太多的人放弃了一部分生活，而投入了游戏。比如我自己，中学时也沉迷过网络游戏，晚上在网吧通宵，白天在教室睡觉。后来意识到这种程度的玩游戏确实伤害了我的现实生活，所以高中起就几乎不再玩任何游戏了。</p>
<p>而作为产品经理，这几年“游戏化”的概念被提起的越来越多，不仅要让 C 端产品好玩，还要让 B 端产品也好玩。而这本书作者的意思也并不是玩游戏改变世界，而是让现实像游戏那样变得有趣，让人快乐的同时又可以创造美好的生活。</p>
<p>游戏化正是互联网时代的重要趋势之一。没有蚂蚁森林我们就不用支付宝付款了吗？没有健身环我们就不锻炼了吗？都不是，但这种游戏化的方式能让我们乐在其中。蚂蚁森林作为一个小游戏，让我们现实生活中的小行为变得有了意义，公共出行对社会是低碳减排，绿色能量让每个人都参与到了一个宏大的公益项目中。</p>
<p>那什么是游戏化？</p>
<h2 id="1-游戏化的四个要素">1、游戏化的四个要素</h2>
<p>抛开游戏类型和技术差异，所有的游戏都有四个决定性要素，而游戏的交互、图形、叙事、奖励、竞争、虚拟环境等都只是起到强化和巩固这四个要素的作用。</p>
<ol>
<li>目标（goal），指的是玩家努力达成的具体结果。它吸引了玩家的注意力，不断调整他们的参与度。目标为玩家提供了“目的性”（sense of purpose）。</li>
<li>规则（rules），为玩家如何实现目标做出限制。它消除或限制了达成目标最明显的方式，推动玩家去探索此前未知的可能空间。规则可以释放玩家的创造力，培养玩家的策略性思维。</li>
<li>反馈系统（feedback system），告诉玩家距离实现目标还有多远。它通过点数、级别、得分、进度条等形式来反映。反馈系统最基本也最简单的形式，就是让玩家认识到一个客观结果：“等……的时候，游戏就结束了。”对玩家而言，实时反馈是一种承诺：目标绝对是可以达到的，它给了人们继续玩下去的动力。</li>
<li>自愿参与（voluntary participation），要求所有玩游戏的人都了解并愿意接受目标、规则和反馈。了解是建立多人游戏的共同基础。任意参与和离去的自由，则是为了保证玩家把游戏中蓄意设计的高压挑战工作视为安全且愉快的活动。</li>
</ol>
<p>我们可以把这四个要素代入到自己喜欢的活动中。比如我周末跟朋友去打篮球，目标是投进更多的球；规则包括篮球本身的规则以及组队对抗的规则；反馈是每进 1 个球团队就得 1 分，进 5 个球就可以打败对方；自愿参与不用说，球场上的人都自愿的认同目标、规则和反馈。</p>
<p>了解了这几个要素，那我们能不能把读书变得有趣一些？我们现实生活中大部分不喜欢做的事情，其实目标和规则都是明确的，但反馈系统很差，很多又都是被动接受的。我们要改善的就是这两点，而首先要改善的就是反馈系统，只有好的反馈系统我们才会自愿参与。</p>
<p>读书的反馈系统可以根据自己的自律能力和喜好来定制。如果你喜欢刷抖音，刚开始可以把自己刷抖音的时间分割，插入读书的时间，读 10 分钟的书，刷 2 分钟的抖音，一个小时下来你读了 50 分钟的书，只刷了 10 分钟的抖音。如果这还困难的话，可以试着再调整一下比例，或者寻找更适合自己的反馈系统，前提是自己可以控制的方式。</p>
<p>我个人以前读书读完就完了，书中讲的知识可能一时也用不到，也不知道有没有效果，就感觉不到任何的反馈。现在每读一本自己认为有用的书，就写一篇文章，一篇篇文章就是我的反馈系统。而这一篇篇文章无论是可以提升自己、应用在工作中、或仅仅是证明我读了多少书，对我多是正向的反馈，所以我也更加变得自愿参与。</p>
<h2 id="2-游戏化的四个目标">2、游戏化的四个目标</h2>
<p>游戏化的四个要素可以让我们参与其中，那游戏化可以实现的四个目标是什么？</p>
<ol>
<li>更满意的工作。满意的工作总是从两件事开始的：一是明确的目标，二是实现这一目标的可操作性步骤。明确的目标激励我们采取行动：我们知道自己该做什么，而可操作性步骤确保我们立刻朝着目标前进。</li>
<li>更有把握的成功。游戏的设计目的，就是让我们学习它们，掌握它们，直至最终成功。任何投入努力的玩家都会不自觉地越玩越好。而合适的失败反馈也是一种奖励。它使我们更加投入，对自己的成功更有把握。</li>
<li>更强的社会联系。我们的幸福完全和其他人交织在一起：家人、朋友、邻居……幸福既不是名词，也不是动词，而是一个连词，是结缔组织。用游戏来代替真正的互动交流并不完美，但它的确能让我们在太过繁忙、无法保持联系时跟扩展的家庭及朋友圈子来往。</li>
<li>更宏大的意义。意义是我们置身比个人更宏大的事业所产生的感觉，是我们的行动比个人性命还重要的信念。意义是我们所有人都渴望获得更多的东西：更多的在宏观图景中创造奇迹的方法，更多的在世界留下痕迹的机会，以及更多的在自己所属的社群或项目中迎来敬畏和好奇的时刻。</li>
</ol>
<p>结合作者的理论，我们在玩游戏时，游戏提供了明确的任务目的，以及完成任务的每一个步骤，使得我们时刻都知道自己在做什么，以及对目标有多远。而游戏化就是要把这两点带入到现实任务中。我最近体验了一个乐器教学的软件，原本枯燥的课程被游戏化变成了探索更多领地的任务，让人更愿意留在其中。</p>
<p>现实中的失败不可避免，游戏中每一次都赢也会没有乐趣。游戏化的现实任务就要像真实游戏一样，引导我们去成功，但在过程中会有积极的失败反馈。</p>
<p>上一辈强烈反对年轻人玩游戏的一个原因就是，有些人一旦开始玩游戏，就隔绝了自己和外界的所有联系。而好的游戏化就需要保持甚至促进玩家的社会联系。比如支付宝的集五福，谁都知道没几块钱，但让朋友家人都参与了进来。</p>
<p>我们大多都是普通人，在现实中完成不了什么大事。但通过游戏化可以让我们参与到一个集体中，形成更大的力量，实现有意义的任务。比如蚂蚁森林，至少对于我自己，通过极其微小的行为，能在沙漠中能种一棵真树，赋予了我这些行为更大的意义。</p>
<h2 id="3-总结">3、总结</h2>
<p>书其实还有两大章，但对于我来说，讲的内容就更加专注于游戏内容，例举了大量的游戏案例，我也只能作为了解，毕竟我不太会去从事专业的游戏相关工作，只是想学习和尝试把“游戏化”带入将来的产品中。</p>
<p>但也要避免赶潮流，强行“游戏化”。我的前老板，刚刚听说了“游戏化”的概念，然后就要在产品中加入积分系统。可我们的产品是企业内部的项目管理软件，是强制员工使用的，员工不会为了积分就多完成两个任务，积分也换不来对员工有价值的东西。</p>
<p>游戏都是经过精心设计的，比如书中提到的《光环》，制作团队包括 250 多名艺术家、设计师、作家、程序员和工程师。单单游戏的音效部分，就包括 54000 种声音和 40000 行对话。光是脚步声就有各不相同的2700种，不同的人脚踩在不同的东西上声音全都不一样。也就怪不得玩家会沉浸在游戏世界中了。</p>
<p>再次回到这本书的主旨，不是号召我们去玩游戏，而是通过“游戏化”，让现实变得有趣。我们每个人都可以试着把“游戏化”用在自己的生活中，比如改掉自己某个不好的习惯、让枯燥的事情好玩起来。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我为什么从蚂蚁分工离职]]></title>
        <id>https://ghysrc.github.io/post/WhyQuitAntbim/</id>
        <link href="https://ghysrc.github.io/post/WhyQuitAntbim/">
        </link>
        <updated>2020-03-01T08:09:50.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/24-16-09-31-ARIHU8.png" alt="24-16-09-31-ARIHU8" loading="lazy"></figure>
<p>决定加入易协做蚂蚁分工这个产品，一是因为上家不靠谱的公司刚入职不久就开始欠薪，二是在当时的选择里，蚂蚁分工看起来还算是个有发展的产品。所以我接受了一定的降薪，加入了一个办公室只坐着 6 个人的公司。</p>
<p>到我离职前，公司已经有 30 个人了。产品仍然有发展的可能，我也从产品经理变成了产品主管，还有一群相处不错的同事，有很多理由让我继续做这款产品。但也有很多理由，让我不得不离开。</p>
<h2 id="1-工作不被尊重">1、工作不被尊重</h2>
<p>在我提出离职前的几个月，老板给我的绩效进行评分时，每次都会扣几分，结果也会反映到工资上，以这种方式表达着对我工作的不满意；在我提出离职的当天，老板说“本来还打算给你涨工资呢”。</p>
<p>那我的工作到底做的好不好？</p>
<p>我在职的期间，老板自己面试招进来过其他三位产品经理，最后一位按职位定义还是我的上级，然而这三位都在入职不到两个月后就离职了。</p>
<p>第一位产品经理，负责一个产品支线的预研。但无法理解老板说的话，前半个月时间我在中间当“翻译”，一个半月离职。</p>
<p>第二位产品经理，负责将预研结果落地实现。但每一版方案都不符合老板的预期，一个半月离职。</p>
<p>第三位产品经理，负责将一个大模块重新设计。但每一次需求讨论会，沟通都不在一个频段上，耗费了大量时间，一个月离职。</p>
<p>我在做好自己的工作、管理好部门员工的同时，还要每隔一段时间补上这几位的工作。第二位产品经理一个月没出方案，我一个星期赶出来交给开发；第三位产品经理一个月没有成果，我两个星期赶出来交给开发。</p>
<p>然而哪怕是在那两个月，我填上产品进度的坑，填上老板自主招人埋下的坑，还要扣我的绩效？？？在填第二位产品经理的坑时，公司的 UI 也离职了，真是亏的我还自己用 Sketch 出的设计稿。</p>
<h2 id="2-产品质量太低">2、产品质量太低</h2>
<p>最严重的一次，所有用户，接近 5 个小时，都无法访问蚂蚁分工。</p>
<p>蚂蚁分工是企业服务类产品，稳定应当是第一位的，而除了最严重的那个上午，每一天都有不少用户反馈各种各样的问题。是问题，不是需求。</p>
<p>其中的很大一部分，问题原因都被开发归属到“缓存问题”，给出的解决方案如下：</p>
<ol>
<li>退出重进</li>
<li>强制杀掉进程再打开</li>
<li>在钉钉的设置里点“清除缓存”</li>
<li>升级钉钉到最新版</li>
<li>退出钉钉账号重新登陆</li>
<li>卸载钉钉后重新安装</li>
</ol>
<p>如果问题在哪一步解决了，那就当做这个问题从来没出现过；如果问题仍然没解决，那也只能不了了之了，因为没人知道究竟是怎么引起的。</p>
<p>其他的问题就不再细说了，测试姐姐更有话语权。</p>
<h2 id="3-产品易用性越来越低">3、产品易用性越来越低</h2>
<p>这个问题听起来应该是我的问题，当然我也有一定的责任，但核心问题在于老板过度的将个人需求和理解加入到了具体的方案设计中。</p>
<p>蚂蚁分工的起源是老板找的外包公司给自己做的定制软件，所以原始的目标用户就是他自己。如果作为定制产品，这自然不会是问题。</p>
<p>但后来他兼职创业，要把蚂蚁分工作为通用的企业 SaaS 服务，那目标用户就产生了变化，不再是他自己，而是各行各业、各个岗位的人。按照用户类型区分，他自己是专家用户，而蚂蚁分工要面向的是广大普通用户。</p>
<p>所以产品的定位跟他个人所需要的产品形态就不再对等了，但他仍然执着于自己的个人需求，认为只要用户按他设定的方式去使用产品，就能达到很好的效果。从逻辑上讲，确实可以达到，但前提太多。比如为了使用多级、分组的标签筛选，就必要先要有条理有规律的设计一套标签，否则用起来就是乱七八糟。</p>
<p>不止用户反复抱怨 xx 功能太难用，客服也向我抱怨，开发也向我抱怨，连运营总监私下也让我好好劝劝老板。但实在是劝不住，在某次谈话中，他明确的表示“我是个非常自我的人”。</p>
<p>我还是想做用户喜欢的产品，而不是某个人喜欢的产品。</p>
<h2 id="4-总结">4、总结</h2>
<p>虽然离职了，但也不是说蚂蚁分工没有优点、或老板都是缺点，做这个产品还是有一些成长。在这做产品，离用户很近，能直接接触到用户；在这管理一个部门，提高了自己的责任心；在这和“难搞”的老板沟通，锻炼了自己的理解和沟通能力。最重要的，我确定了相较于 C 端产品，我还是更喜欢做 B 端产品。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《远见》- 规划职业生涯]]></title>
        <id>https://ghysrc.github.io/post/TheLongView/</id>
        <link href="https://ghysrc.github.io/post/TheLongView/">
        </link>
        <updated>2020-02-24T09:19:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/07-17-19-13-s29699274.jpg" alt="s29699274.jpg" loading="lazy"></figure>
<p>找工作面试的时候，总是会被问到“你接下来的职业生涯是如何规划的”。每次都像走过场一样，根据自己的现状，谈一谈接下来要做的事情以及想要达成的目标。在后面的工作中，就几乎不会再想起这个问题了。无意中在知乎上看到了这本书的推荐，现在就郑重的面对一下这个问题。</p>
<h2 id="1-职业生涯有多长">1、职业生涯有多长</h2>
<p>这本书开篇的一句话就让我有点震惊，不是什么高深的道理，而是一直以来我都知道但却几乎没有意识到的事情：<strong>职业生涯是很长的。</strong></p>
<p>以当前中国法定的退休年龄计算，一个人的职业生涯是要长达 40 年的。而法定退休年龄也有继续推迟的趋势，再加上到了年龄不一定就能退休，所以有可能更长。</p>
<p>我考虑过 3 年或 5 年后，我应该完成哪些事情，相应的我现在应该开始做什么准备。却从来都没想过，到 40 岁、50 岁的时候，我要做什么，我现在又需要准备什么。</p>
<p>过去几年我关于工作做出的选择，去哪家公司、做哪个行业的产品，都是基于当时的情况以及短期的未来考虑的。那些选择从长远看是否有益呢？我完全不知道，也许几十年后回过头看才能知道，但有一个长远的规划可以指导自己在当下做出更恰当的选择。</p>
<p>书中把一个 45 年的职业生涯划分为三个阶段，每个阶段有不同的目标。阶段之间紧密联系，前一个阶段可以为下一个阶段创造机会，也可能会让下一个阶段愈加艰难。</p>
<h2 id="2-三大职业生涯阶段">2、三大职业生涯阶段</h2>
<p>一个完整的职业生涯实在太长，关于后两个阶段我目前也很难有深入的思考和共鸣，所以这里就仅仅是概念和理论的理解，有兴趣的人可以读读原书。我主要的思考和感悟还是在第一阶段和第二阶段的开端。</p>
<p><strong>第一阶段，添加燃料，强势开局</strong></p>
<p>第一阶段你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。</p>
<p>第一阶段是一个学习和探索的过程，充满了尝试和错误。最重要的不是找到一份令人羡慕的工作，而是找出自己擅长的和喜欢的，不擅长和不喜欢的。</p>
<p><strong>第二阶段，锚定甜蜜区，聚焦长版</strong></p>
<p>第二阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。</p>
<p>第二阶段是识别、拓展和投注你的长板的时候。这个时候，你必须学会拓展行动规模，从而让影响力倍增。第二阶段最成功的领导者能出色地统一他们的热情所在和核心长板，同时在很大程度上忽视自己的短板。</p>
<p><strong>第三阶段，优化长尾，发挥持续影响</strong></p>
<p>第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。</p>
<h2 id="3-做好第一阶段">3、做好第一阶段</h2>
<p>第一个阶段通俗的讲，就是学习和成长的阶段，我们要去学习专业和非专业的技能，要在工作中通过有价值的经验来成长，最好再维持一些有效的社交关系。</p>
<h3 id="31-掌握必备技能">3.1 掌握必备技能</h3>
<p>哪些是非专业技能？在不同行业、不同岗位都需要，甚至在生活中也需要的技能。包括：</p>
<ol>
<li>学习能力。人的知识范围是有限的，面对新的工作领域，你有没有足够的学习能力去及时掌握信息。</li>
<li>解决问题能力。每一份工作的内容实际上都是解决问题，你能否快速且有效的解决你遇到的问题。</li>
<li>团队协作能力。就算是自由职业者也肯定是有合作伙伴的，你能否和同事顺畅的协同工作，至少达到 1+1=2 的效果。</li>
<li>沟通能力。你能不能逻辑清晰的表达出自己的观点，在公开场合是否也可以做到沉稳冷静，让对方愿意听且接收到正确的信息。</li>
<li>寻找帮助的能力。你能否找到合适的人或资源，来协助自己做好工作。</li>
<li>情商。情商覆盖的范围很广，在职场中主要是在合适的时间做合适的事情，不让他人感到不舒服。</li>
<li>保持健康。这是所有事情的基础，应该把这个也作为规划的一部分，而不是过渡消耗身体去疯狂工作。</li>
</ol>
<p>那专业技能怎么办？靠意愿和时间。一万小时定律说的也是这个道理，但投入时间的前提是意愿，意愿代表着时间的效率。就以读书为例，同样的时间不同的意愿，就有可能读完了就忘，也有可能书里的知识就变成了你自己的。</p>
<p>最近一年我才开始重视持续的学习，虽然有点晚，但对于未来的职业生涯，现在开始都是刚刚好的。</p>
<h3 id="32-积累有效经验">3.2 积累有效经验</h3>
<p>在程序员岗位上有个例子，同样工作十年，有人是高级工程师，有人是十年经验的初级工程师。重复性的工作只会增长资历，而不会增长专业技能和经验。</p>
<p>有效的工作经验，是你在过往的工作中完成了一个比一个困难的任务，在你将来面对更大的工作挑战时可以给你有效的支撑。</p>
<p>现在回头看，过去在一家做社交的创业公司，虽然做了几个产品，但本质上是一个产品被重复了几次，对我有效的工作经验除了第一个产品之外，就只有“以后要避免这种公司”的经验了。</p>
<h3 id="33-有价值的社交关系">3.3 有价值的社交关系</h3>
<p>这一点也是经常提到的，要维系自己的职场人脉。不得不说，这一点我目前做的很差。在经历了换城市、换岗位之后，能和自己一起做事情的寥寥数几。当然这只是职场人脉的一部分，其他的还有：</p>
<ol>
<li>好的领导。如果入行或入职时能遇到一个好的导师型领导，会有很大的帮助，而遇到这样的人一定要维系。</li>
<li>合作伙伴。如果你要做一件事情，谁可以跟你合作，谁可以弥补你的短板。</li>
<li>遇到的人才。有足够能力和才华的那些人，有机会要去结识。</li>
<li>同类。与你工作岗位类似，可以一起成长的人。</li>
</ol>
<h2 id="4-总结">4、总结</h2>
<p>其实看完书我仍然不能规划出 40 年的职业生涯，但这本书已经引起了我对这个问题的注意和思考。处于第一阶段的我，会根据书中的建议，去学习去探索，去尝试去犯错。正确的认识自己，看清自己的选择，避免把职业生涯当成眼前的一份工作，而是去规划它。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求实现（一）流程]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-shi-xian-yi-liu-cheng/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-shi-xian-yi-liu-cheng/">
        </link>
        <updated>2020-02-17T13:32:35.000Z</updated>
        <content type="html"><![CDATA[<p>通过需求分析，明确了用户需求转化为产品需求后，我们要在产品上实现什么才能满足用户需求，比如要加一个导出功能。但我们不能直接就找开发说“在 xxx 页面加个导出功能”，因为通过这句话得不出具体的开发工作。</p>
<p>一个产品需求到具体的实现方案，仍然是一步步形成的。从业务流程到页面流程，再到原型设计交互设计，每一步都通过了才是一个可执行的实现方案。这一篇介绍业务流程和页面流程。</p>
<h2 id="1-业务流程">1、业务流程</h2>
<p>由两个及以上的业务步骤，完成一个完整的业务行为的过程，可称之为流程。做任何事情实际上都有既定的流程，比如做一顿饭从买菜开始到洗碗结束可以定义出好几个步骤。而在产品中，无论是使用整个产品还是使用产品中的某一个功能，也都存在既定的流程。好的产品和功能流程自然、逻辑清晰，用户操作起来也会更加顺畅。而为了让用户能有好的操作体验，产品经理就得先设计出合理的流程。</p>
<h3 id="11-流程的四个要素">1.1 流程的四个要素</h3>
<p>一个合理的业务流程应该要包含以下四个要素：</p>
<ol>
<li>目的。这个业务流程最终要解决的问题和实现的目的是什么。</li>
<li>用户。谁需要或者谁使用这个流程。</li>
<li>步骤。用户为了达到目的，必经的步骤有哪些。</li>
<li>反馈。用户在流程中遇到的问题，如何处理。</li>
</ol>
<p>以开头说到的导出功能为例来依次分析：</p>
<ol>
<li>导出的目的是什么？是为了转移数据，还是为了加工处理？</li>
<li>谁需要导出？是每个用户，还是某类用户？</li>
<li>导出需要几步操作？要不要选择时间范围、数据范围、导出格式？</li>
<li>流程中的异常怎么处理？网络异常，数据量过大，没有数据...</li>
</ol>
<p>只有想清楚了这些问题，才可以说是一个相对完整的业务流程。</p>
<h3 id="12-流程如何表达">1.2 流程如何表达</h3>
<p>产品经理想清楚了流程中的所有细节，那如何让其他人也能同步的理解呢？俗话说一图胜千言，这里就需要画流程图了。流程图简单说就是用一些图形和说明来表达过程的方法。常用的图形和代表的含义如下图示例：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-22-15-IMG_0709.JPG" alt="IMG_0709.JPG" loading="lazy"></figure>
<p>仍然以导出功能的流程为例，结合这些图形，就可以画出类似下面的流程图。这样就可以通过图形化以及其过程流转，清晰的表达出流程的各个要素。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-36-48-%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE.png" alt="导出数据.png" loading="lazy"></figure>
<h3 id="13-复杂流程">1.3 复杂流程</h3>
<p>常见的复杂流程就是一个大的流程需要多个角色参与，每个角色都有自己的小流程，这些小流程又互有关联。这里在上面简单的导出流程中，加一个审批人的角色，导出数据必须要通过审批后才可以导出，就形成了一个复杂流程。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-55-32-%E7%94%B3%E8%AF%B7%E5%AF%BC%E5%87%BA.png" alt="申请导出.png" loading="lazy"></figure>
<p>再复杂的流程也是由一个个独立流程组成的，复杂流程中的独立流程就相当于独立流程中的步骤，方法是通用的。复杂流程中的四个要素是这样的：</p>
<ol>
<li>目的。各个参与者的任务是什么，总的任务是什么？</li>
<li>用户。参与者有哪些，各自的角色分工是什么？</li>
<li>步骤。子流程之间的流转关系是什么？</li>
<li>反馈。一个子流程出现了异常，其他的流程会如何应对？</li>
</ol>
<h2 id="2-页面流程">2、页面流程</h2>
<p>业务流程确定了之后，很多时候我们就开始做原型了，对于单一页面或小的业务流程，确实是可以的。但对于在多个页面之间流转的功能业务，在设计完整的原型页面之前，可以通过展示各个页面中的关键元素，以及串联页面关系的方式，来提前感知页面流程是否合理，从而去指导后续的原型和交互设计。</p>
<p>以拼多多的下单为例，拼多多在商品详情页可以进行单独购买、发起拼单、参与拼单三种下单方式操作。这三种方式的页面流向分别如下：</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-16-27-59-%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B.png" alt="页面流程.png" loading="lazy"></figure>
<p>通过页面流程图，可以快速的感知用户操作流程是否合理顺畅，提早发现流程中的问题进行优化；可以突出各个页面的重点元素，提前确定原型设计的注意点。以达到减少原型反复修改的目的，毕竟一套原型改起来也是不小的工作量。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（四）优先级]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-si-you-xian-ji/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-si-you-xian-ji/">
        </link>
        <updated>2020-02-13T11:23:57.000Z</updated>
        <content type="html"><![CDATA[<p>需求池搭建好了，需求也进来了，就该规划出实现需求的先后顺序了，然后再跟进需求顺序进行版本规划。</p>
<p>常见的需求分析模型有马斯洛需求层次理论和 KANO 模型，马斯洛需求层次理论一般用在产品的需求定位上，比如饿了么对应设立需求，微博对应归属需求。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-18-52-59-msl1.jpg" alt="msl1.jpg" loading="lazy"></figure>
<h2 id="1-kano-需求模型">1、KANO 需求模型</h2>
<p>KANO 模型是东京理工大学教授狩野纪昭（Noriaki Kano）发明的对用户需求分类和优先排序的有用工具，以分析用户需求对用户满意的影响为基础，体现了产品性能和用户满意之间的非线性关系。可以通过判断需求在坐标中的位置，得出相应的优先级。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-18-57-31-kano.jpg" alt="kano.jpg" loading="lazy"></figure>
<h3 id="11-基本型需求">1.1 基本型需求</h3>
<p>也叫必备型需求，是用户的痛点，也是用户对产品的最基本要求。产品有是应该的，没有就是不可接受的。比如路由器，它连续一年为我们提供网络服务我们也不会有什么感觉，可偶尔出现故障，那就是无法接受的。</p>
<h3 id="12-期望型需求">1.2 期望型需求</h3>
<p>也叫意愿型需求，是用户的痒点，是优秀产品的品质。比如路由器，早期大多数用户都为晦涩难懂的说明书烦躁过，希望路由器设置能简单一点。虽说这种功能没有也能凑合用，但有的话会极大的提高用户满意度。</p>
<h3 id="13-兴奋型需求">1.3 兴奋型需求</h3>
<p>也叫魅力型需求，是用户的爽点，是产品中用户没有想到，但令用户惊喜的点。比如我买的小米路由器，可以免设置的自动连接智能家居设备。这种功能没有也不会引起我的不满意，毕竟已经习惯了手机连 WiFi 也要输密码，智能家居也只用输一次而已。</p>
<h3 id="14-无差异需求">1.4 无差异需求</h3>
<p>无论有没有、好与坏，对用户都没有影响的需求。比如我的小米路由器，APP 里有个工具箱，里面列出了 19 个小功能，但除了路由器本身是设置之外，其他的功能有或没有、有多少个，都是无所谓的。</p>
<h3 id="15-反向型需求">1.5 反向型需求</h3>
<p>俗话说就是越做越错，就是实现了新的需求反而让用户更加的不满意。如果小米路由器天天给我推送优惠活动、社会新闻，那我对它的满意度绝对迅速下降。</p>
<p>基于 KANO 模型可以通过问卷的方式来收集用户对需求的态度，类似下表的格式：</p>
<table>
<thead>
<tr>
<th>需求</th>
<th>非常喜欢</th>
<th>能有更好</th>
<th>理应该有</th>
<th>有没有都可以</th>
<th>不喜欢</th>
</tr>
</thead>
<tbody>
<tr>
<td>路由器防蹭网功能</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="2-ice-评分">2、ICE 评分</h2>
<p>ICE 评分排序是由 Sean Ellis 发明的，“增长黑客”这个概念也是他提出的，ICE 评分排序的理念如下：</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/22-17-02-58-ICE%20Score.png" alt="ICE Score.png" loading="lazy"></figure>
<p>每个需求的 ICE 评分就等于<code>Impact x Confidence x Ease</code>，工作中可以使用类似下面的表格来进行评分和对比：</p>
<table>
<thead>
<tr>
<th>需求</th>
<th>I - 影响力</th>
<th>C- 信心</th>
<th>E - 难度</th>
<th>ICE 评分</th>
</tr>
</thead>
<tbody>
<tr>
<td>免密码自动连接</td>
<td>7</td>
<td>9</td>
<td>8</td>
<td>504</td>
</tr>
<tr>
<td>WiFi 红包</td>
<td>3</td>
<td>8</td>
<td>6</td>
<td>144</td>
</tr>
</tbody>
</table>
<p>还有一种 ICE 评分方法的扩展，叫做 RICE 评分，是在 ICE 评分的基础上增加了 Reach 即覆盖量的因素，RICE 的计算方式为：</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/22-17-11-05-rice.jpg" alt="rice.jpg" loading="lazy"></figure>
<p>RICE 里面的 E 变成了 Effort，其实也是工作量的意思，不必纠结。</p>
<h2 id="3-四象限法">3、四象限法</h2>
<p>四象限有多种划分方法，KANO 本质上也是个四象限，其他最常用的就是重要紧急四象限，还可以看需求的影响面、开发的难度等。不同的产品在不同的阶段对不同的需求参考的原则也可能略有不同。</p>
<h3 id="31-重要紧急">3.1 重要紧急</h3>
<ol>
<li>又重要又紧急。马上就要做的事情，但如果每天都在处理这类事情，那就说明工作安排是有问题的。</li>
<li>紧急但不重要。这样的事情可以做，但尽量的少做。</li>
<li>重要但不紧急。如果安排得当，大部分的工作都应该落在这个象限。</li>
<li>不紧急不重要。尽量的不要做。</li>
</ol>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-21-18-06-%E9%87%8D%E8%A6%81%E7%B4%A7%E6%80%A5.png" alt="重要紧急.png" loading="lazy"></figure>
<h3 id="32-roi">3.2 ROI</h3>
<p>ROI 是投资回报率的意思，通俗点说就是评估做这一件事值不值，投入和回报的关系。这里的投入和回报都是宽泛的概念，投入包括金钱、时间、资源等，回报也包括收益、口碑、市场等，ROI 可以综合起来评估，也可以细分的评估。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/23-15-08-22-roi.png" alt="roi.png" loading="lazy"></figure>
<h2 id="4-总结">4、总结</h2>
<p>优先级是需求与需求之间的竞争，而不是需求方和产品经理的竞争。如果做不好需求的优先级分级，就很容易进入“每天又忙又乱”的工作状态，而且每个人都在抱怨，因为每个需求方都会认为自己的需求是重要且紧急的。所以产品经理必须要搭建好需求池，安排好优先级，最后公开共享。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（三）拆解和需求池]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-fang-fa-he-you-xian-ji/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-fang-fa-he-you-xian-ji/">
        </link>
        <updated>2020-02-09T13:22:38.000Z</updated>
        <content type="html"><![CDATA[<p>前两篇了解什么是产品角度的需求和来源，以及怎么去主动收集需求，这篇就看看怎么分析需求，怎么决定一个需求要不要做，先做后做。</p>
<h2 id="1-拆解需求">1、拆解需求</h2>
<p>上篇说到，一个产品角度的需求 = 用户 + 场景 + 目的 + 任务，那分析一个需求要不要做、先做后做，就是从这个几个角度综合分析的。</p>
<h3 id="11-提需求的用户是不是产品的目标用户">1.1 提需求的用户是不是产品的目标用户？</h3>
<p>产品经理最害怕的不是用户需求多，而是老板需求多，因为老板大都把自己当做产品的用户。但任何一个产品都不可能适合所有人，产品一定有它的目标用户群，而一些老板需求就仅仅是老板个人需求，并不具备普遍性。</p>
<p>所以分析需求首先看提需求的用户是不是产品目标用户，如果不是，则大概率是要剔除的。</p>
<h3 id="12-用户的场景是不是典型使用场景">1.2 用户的场景是不是典型使用场景？</h3>
<p>比如笔记软件，用户想在某些场景下，邀请朋友一起编辑文档。这个用户需求本身并没有错，确实对他是有用的。但笔记软件的典型使用场景是个人记录，不是协同协作，所以这个需求大概率也要剔除。</p>
<h3 id="13-用户的目的是否必须得达成">1.3 用户的目的是否必须得达成？</h3>
<p>目标用户的典型场景下，需求好像就必须要做了，但我们可以再反问一下，能不能不做？不做的话影响有多少？</p>
<p>比如笔记软件的导出功能，用户想本地留备份肯定是没错的。但笔记不能导出也不会影响用户的使用，至少在产品的早期，这个需求是可以不被满足的。</p>
<h3 id="14-我们如何实现这个需求">1.4 我们如何实现这个需求？</h3>
<p>经过前面 3 个问题的论证，那这个需求就应该要做了。那实现这个需求要做哪些准备？需要用到什么资源？是否有什么限制？比如是否要用到第三方 SDK，研发实力能不能实现等。</p>
<h2 id="2-建立需求池">2、建立需求池</h2>
<p>经过需求的拆解分析，那些确定要做的需求就需要更为完整的记录下来，便于后续的迭代管理。那些暂时认为不该做的，在原始记录的基础上，添加上不做的原因，以便回溯。</p>
<p>我常用的需求池大概是这样的：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/23-19-22-28-pool.png" alt="" loading="lazy"></figure>
<ul>
<li>需求状态。需求正在处于哪个阶段，比如正在开发，还是在设计中。</li>
<li>所属模块。产品一般都会分为几个功能模块，便于组织整理。</li>
<li>需求任务。这里的任务就是用户需求转化为产品需求后，我们要做的事情。前面的编号是我自己起的，字母代表模块，数字代表模块内的需求编号。</li>
<li>优先级。需求肯定无法同时去进行的，必须制定出哪个先做哪个后做。优先级的制定下一篇会说。</li>
<li>计划版本。计划在后面的哪个版本更新中实现。</li>
<li>预计上线。计划的版本在什么时候上线。</li>
<li>需求来源。是用户的反馈，还是老板的需求，还是自己挖掘出来的。</li>
<li>提交时间。这个需求是哪一天提交的。</li>
<li>停留时长。自提交后，这个需求在需求池里呆了多少天了。</li>
<li>原始描述。提交需求的人，原话是如何描述的，包括文字、图片等。而前面的需求任务是产品经理对于原始描述拆解分析后，转化的开发任务。</li>
<li>备注。其他信息。</li>
</ul>
<p>其他的字段可以根据公司和产品的特点来增减，比如终端，电脑端还是手机端的需求，也可以通过两端使用两个需求池来处理。</p>
<p>而对于那些收到但决定不做的需求，是不进入需求池的，而是应该用其他的表格记录。比如记录好决定不做的理由是什么，是否反馈给了提交人。</p>
<p>除此之外 bug 也是不进需求池的，bug 在任何时候都是第一优先要去处理的，而需求池的目的是预先做好工作安排。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（二）用户调研]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-er-yong-hu-diao-yan/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-er-yong-hu-diao-yan/">
        </link>
        <updated>2020-02-06T11:19:52.000Z</updated>
        <content type="html"><![CDATA[<p>上一篇了解了什么是产品角度的需求，以及需求的来源和简单的记录，其中有一种需求来源需要产品经理去主动的获取，通过各种适合的方式去得到用户的反馈，就是用户调研。通过用户调研可以了解目标用户的使用场景和流程，获得目标用户的意见反馈，并根据调研结果去改进产品。</p>
<h2 id="1-用户调研过程">1、用户调研过程</h2>
<h3 id="11-明确调研的背景和目的">1.1 明确调研的背景和目的</h3>
<p>调研的背景就是我们为什么要做调研，产品遇到了什么问题，除了调研是否还有其他的解决方式？<br>
如果确定了需要做调研，就要明确目的是什么，我们通过调研要得出什么结论？这里说的结论是可转化为行动的结论，比如结论是增加一个 xx 功能，放弃某个新业务规划。而不该是一个宽泛的结论，比如结论是我们的产品比 x 竞品好，那这个结论如何指导我们的后续工作？</p>
<h3 id="12-选择调研方式">1.2 选择调研方式</h3>
<p>只要能达到调研目的，什么方式都可以，不必拘泥于理论。自然也不是每个产品每个公司都有条件去搞焦点小组，或者是现场观察用户的真实使用流程。</p>
<ol>
<li>问卷调查。成本最低，优点是样本数可以很大，缺点是无法深入，也很难保障数据的真实性。</li>
<li>数据验证。通过在产品中用户使用流程的轨迹埋点，或者是 AB测试，通过科学统计得到真实反馈。</li>
<li>用户访谈。与用户直接沟通，通过设计好的访谈问题可以了解到用户的真实想法和潜在需求。不限于面对面，电话或者视频都是可以的。</li>
<li>场景观察。通过观察用户真实的操作环境，直观了解用户的现实需求和业务流程。不限于必须在旁边观察，对于软件来说可以通过录屏的方式。</li>
</ol>
<h3 id="13-设计调研流程">1.3 设计调研流程</h3>
<p>根据选定的调研方式，设计出相应的调研流程。</p>
<ol>
<li>问卷调查。题目是最关键的，基于调研目的整理出主要的问题，可以先进行一论小范围的问卷，经过优化后再进行大范围调查。</li>
<li>数据验证。要埋的点有哪些，最终结论的计算公式是什么。</li>
<li>用户访谈。访谈过程的大体步骤，要问哪些问题，自己的话术，可以内部演练。</li>
<li>场景观察。预想用户操作过程中可能遇到的问题与解决方案，准备自己的提问。</li>
</ol>
<h3 id="14-选择调研用户">1.4 选择调研用户</h3>
<p>除了无差别的全面问卷调查，做用户调研也是对应的目标用户，因为不是每个用户都是典型用户，每个用户都可以被调研。</p>
<ol>
<li>根据调研目的，在所有用户中根据用户画像选定典型用户</li>
<li>在典型用户中，根据时间、地点、配合程度等因素选定目标用户</li>
<li>告知目标用户调研信息，如目的和方式，筛选出最终的调研用户</li>
</ol>
<h3 id="15-调研过程">1.5 调研过程</h3>
<ol>
<li>问卷调查。确定截止时间，想办法调动用户积极性，确保收集到足够的样本。</li>
<li>数据验证。不时的跟进查看，及时优化算法。</li>
<li>用户访谈。倾听为主，引导和鼓励用户多分享。</li>
<li>场景观察。观察用户行为和情绪，做好记录，对关键行为进行追问。</li>
</ol>
<h3 id="16-调研总结">1.6 调研总结</h3>
<p>无论是哪种调研方式，最后都是整理好用户的反馈，汇总得出与调研目的对应的结论。</p>
<h2 id="2-用户调研误区">2、用户调研误区</h2>
<h3 id="21-带有主观偏向性">2.1 带有主观偏向性</h3>
<p>在产品的规划中，你的老板想做 A，而你想做 B，你要通过用户调研得出结论，做 A 还是做 B？很有可能为了证明自己的正确性，在调研内容的设计中，无意识的带了引导性的词语或问题。同时也有可能在倾听或记录时，无意就放大了自己想听的。尽量确保调研内容是客观中立的，调研过程中主观的只有用户。</p>
<h3 id="22-直接问用户要什么">2.2 直接问用户要什么</h3>
<p>对于同一个问题，在不同的场景下，得到截然不同的答案，其实是很正常的。比如索尼音箱的例子，用户都说喜欢黄色，但从黄色和黑色选择的时候，大部分又都选择了黑色。在访谈和观察中，要通过用户行为和情绪得到答案，而避免直接去问。</p>
<h3 id="23-把单一问题当整体问题">2.3 把单一问题当整体问题</h3>
<p>有些用户是非常有热情的，描述的场景和问题时也很有感染力，无形之中就加大了某个需求的比重，进而影响我们把这个问题的级别提高了，可能我们都会劝自己“虽然这个问题提的少，但对用户很重要”。</p>
<h3 id="24-教用户怎么用">2.4 教用户怎么用</h3>
<p>和我们教父母使用智能机不一样，在场景观察中其实是用户通过行为和情绪，来教我们怎么去提高和优化产品。我们在用户旁边不是要去教这一个用户怎么正确的使用产品，而是通过这一个用户帮我们认识到产品的普适缺陷。</p>
]]></content>
    </entry>
</feed>