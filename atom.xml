<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ghysrc.github.io</id>
    <title>PM海洋</title>
    <updated>2020-03-07T09:22:43.099Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ghysrc.github.io"/>
    <link rel="self" href="https://ghysrc.github.io/atom.xml"/>
    <subtitle>Just do better</subtitle>
    <logo>https://ghysrc.github.io/images/avatar.png</logo>
    <icon>https://ghysrc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, PM海洋</rights>
    <entry>
        <title type="html"><![CDATA[《远见》- 规划职业生涯]]></title>
        <id>https://ghysrc.github.io/post/lesslessyuan-jian-greatergreater-gui-hua-zhi-ye-sheng-ya/</id>
        <link href="https://ghysrc.github.io/post/lesslessyuan-jian-greatergreater-gui-hua-zhi-ye-sheng-ya/">
        </link>
        <updated>2020-02-24T09:19:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/07-17-19-13-s29699274.jpg" alt="s29699274.jpg" loading="lazy"></figure>
<p>找工作面试的时候，总是会被问到“你接下来的职业生涯是如何规划的”。每次都像走过场一样，根据自己的现状，谈一谈接下来要做的事情以及想要达成的目标。在后面的工作中，就几乎不会再想起这个问题了。无意中在知乎上看到了这本书的推荐，现在就郑重的面对一下这个问题。</p>
<h2 id="1-职业生涯有多长">1、职业生涯有多长</h2>
<p>这本书开篇的一句话就让我有点震惊，不是什么高深的道理，而是一直以来我都知道但却几乎没有意识到的事情：<strong>职业生涯是很长的。</strong></p>
<p>以当前中国法定的退休年龄计算，一个人的职业生涯是要长达 40 年的。而法定退休年龄也有继续推迟的趋势，再加上到了年龄不一定就能退休，所以有可能更长。</p>
<p>我考虑过 3 年或 5 年后，我应该完成哪些事情，相应的我现在应该开始做什么准备。却从来都没想过，到 40 岁、50 岁的时候，我要做什么，我现在又需要准备什么。</p>
<p>过去几年我关于工作做出的选择，去哪家公司、做哪个行业的产品，都是基于当时的情况以及短期的未来考虑的。那些选择从长远看是否有益呢？我完全不知道，也许几十年后回过头看才能知道，但有一个长远的规划可以指导自己在当下做出更恰当的选择。</p>
<p>书中把一个 45 年的职业生涯划分为三个阶段，每个阶段有不同的目标。阶段之间紧密联系，前一个阶段可以为下一个阶段创造机会，也可能会让下一个阶段愈加艰难。</p>
<h2 id="2-三大职业生涯阶段">2、三大职业生涯阶段</h2>
<p>一个完整的职业生涯实在太长，关于后两个阶段我目前也很难有深入的思考和共鸣，所以这里就仅仅是概念和理论的理解，有兴趣的人可以读读原书。我主要的思考和感悟还是在第一阶段和第二阶段的开端。</p>
<p><strong>第一阶段，添加燃料，强势开局</strong></p>
<p>第一阶段你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。</p>
<p>第一阶段是一个学习和探索的过程，充满了尝试和错误。最重要的不是找到一份令人羡慕的工作，而是找出自己擅长的和喜欢的，不擅长和不喜欢的。</p>
<p><strong>第二阶段，锚定甜蜜区，聚焦长版</strong></p>
<p>第二阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。</p>
<p>第二阶段是识别、拓展和投注你的长板的时候。这个时候，你必须学会拓展行动规模，从而让影响力倍增。第二阶段最成功的领导者能出色地统一他们的热情所在和核心长板，同时在很大程度上忽视自己的短板。</p>
<p><strong>第三阶段，优化长尾，发挥持续影响</strong></p>
<p>第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。</p>
<h2 id="3-做好第一阶段">3、做好第一阶段</h2>
<p>第一个阶段通俗的讲，就是学习和成长的阶段，我们要去学习专业和非专业的技能，要在工作中通过有价值的经验来成长，最好再维持一些有效的社交关系。</p>
<h3 id="31-掌握必备技能">3.1 掌握必备技能</h3>
<p>哪些是非专业技能？在不同行业、不同岗位都需要，甚至在生活中也需要的技能。包括：</p>
<ol>
<li>学习能力。人的知识范围是有限的，面对新的工作领域，你有没有足够的学习能力去及时掌握信息。</li>
<li>解决问题能力。每一份工作的内容实际上都是解决问题，你能否快速且有效的解决你遇到的问题。</li>
<li>团队协作能力。就算是自由职业者也肯定是有合作伙伴的，你能否和同事顺畅的协同工作，至少达到 1+1=2 的效果。</li>
<li>沟通能力。你能不能逻辑清晰的表达出自己的观点，在公开场合是否也可以做到沉稳冷静，让对方愿意听且接收到正确的信息。</li>
<li>寻找帮助的能力。你能否找到合适的人或资源，来协助自己做好工作。</li>
<li>情商。情商覆盖的范围很广，在职场中主要是在合适的时间做合适的事情，不让他人感到不舒服。</li>
<li>保持健康。这是所有事情的基础，应该把这个也作为规划的一部分，而不是过渡消耗身体去疯狂工作。</li>
</ol>
<p>那专业技能怎么办？靠意愿和时间。一万小时定律说的也是这个道理，但投入时间的前提是意愿，意愿代表着时间的效率。就以读书为例，同样的时间不同的意愿，就有可能读完了就忘，也有可能书里的知识就变成了你自己的。</p>
<p>最近一年我才开始重视持续的学习，虽然有点晚，但对于未来的职业生涯，现在开始都是刚刚好的。</p>
<h3 id="32-积累有效经验">3.2 积累有效经验</h3>
<p>在程序员岗位上有个例子，同样工作十年，有人是高级工程师，有人是十年经验的初级工程师。重复性的工作只会增长资历，而不会增长专业技能和经验。</p>
<p>有效的工作经验，是你在过往的工作中完成了一个比一个困难的任务，在你将来面对更大的工作挑战时可以给你有效的支撑。</p>
<p>现在回头看，过去在一家做社交的创业公司，虽然做了几个产品，但本质上是一个产品被重复了几次，对我有效的工作经验除了第一个产品之外，就只有“以后要避免这种公司”的经验了。</p>
<h3 id="33-有价值的社交关系">3.3 有价值的社交关系</h3>
<p>这一点也是经常提到的，要维系自己的职场人脉。不得不说，这一点我目前做的很差。在经历了换城市、换岗位之后，能和自己一起做事情的寥寥数几。当然这只是职场人脉的一部分，其他的还有：</p>
<ol>
<li>好的领导。如果入行或入职时能遇到一个好的导师型领导，会有很大的帮助，而遇到这样的人一定要维系。</li>
<li>合作伙伴。如果你要做一件事情，谁可以跟你合作，谁可以弥补你的短板。</li>
<li>遇到的人才。有足够能力和才华的那些人，有机会要去结识。</li>
<li>同类。与你工作岗位类似，可以一起成长的人。</li>
</ol>
<h2 id="4-总结">4、总结</h2>
<p>其实看完书我仍然不能规划出 40 年的职业生涯，但这本书已经引起了我对这个问题的注意和思考。处于第一阶段的我，会根据书中的建议，去学习去探索，去尝试去犯错。正确的认识自己，看清自己的选择，避免把职业生涯当成眼前的一份工作，而是去规划它。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求实现（一）流程]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-shi-xian-yi-liu-cheng/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-shi-xian-yi-liu-cheng/">
        </link>
        <updated>2020-02-17T13:32:35.000Z</updated>
        <content type="html"><![CDATA[<p>通过需求分析，明确了用户需求转化为产品需求后，我们要在产品上实现什么才能满足用户需求，比如要加一个导出功能。但我们不能直接就找开发说“在 xxx 页面加个导出功能”，因为通过这句话得不出具体的开发工作。</p>
<p>一个产品需求到具体的实现方案，仍然是一步步形成的。从业务流程到页面流程，再到原型设计交互设计，每一步都通过了才是一个可执行的实现方案。这一篇介绍业务流程和页面流程。</p>
<h2 id="1-业务流程">1、业务流程</h2>
<p>由两个及以上的业务步骤，完成一个完整的业务行为的过程，可称之为流程。做任何事情实际上都有既定的流程，比如做一顿饭从买菜开始到洗碗结束可以定义出好几个步骤。而在产品中，无论是使用整个产品还是使用产品中的某一个功能，也都存在既定的流程。好的产品和功能流程自然、逻辑清晰，用户操作起来也会更加顺畅。而为了让用户能有好的操作体验，产品经理就得先设计出合理的流程。</p>
<h3 id="11-流程的四个要素">1.1 流程的四个要素</h3>
<p>一个合理的业务流程应该要包含以下四个要素：</p>
<ol>
<li>目的。这个业务流程最终要解决的问题和实现的目的是什么。</li>
<li>用户。谁需要或者谁使用这个流程。</li>
<li>步骤。用户为了达到目的，必经的步骤有哪些。</li>
<li>反馈。用户在流程中遇到的问题，如何处理。</li>
</ol>
<p>以开头说到的导出功能为例来依次分析：</p>
<ol>
<li>导出的目的是什么？是为了转移数据，还是为了加工处理？</li>
<li>谁需要导出？是每个用户，还是某类用户？</li>
<li>导出需要几步操作？要不要选择时间范围、数据范围、导出格式？</li>
<li>流程中的异常怎么处理？网络异常，数据量过大，没有数据...</li>
</ol>
<p>只有想清楚了这些问题，才可以说是一个相对完整的业务流程。</p>
<h3 id="12-流程如何表达">1.2 流程如何表达</h3>
<p>产品经理想清楚了流程中的所有细节，那如何让其他人也能同步的理解呢？俗话说一图胜千言，这里就需要画流程图了。流程图简单说就是用一些图形和说明来表达过程的方法。常用的图形和代表的含义如下图示例：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-22-15-IMG_0709.JPG" alt="IMG_0709.JPG" loading="lazy"></figure>
<p>仍然以导出功能的流程为例，结合这些图形，就可以画出类似下面的流程图。这样就可以通过图形化以及其过程流转，清晰的表达出流程的各个要素。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-36-48-%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE.png" alt="导出数据.png" loading="lazy"></figure>
<h3 id="13-复杂流程">1.3 复杂流程</h3>
<p>常见的复杂流程就是一个大的流程需要多个角色参与，每个角色都有自己的小流程，这些小流程又互有关联。这里在上面简单的导出流程中，加一个审批人的角色，导出数据必须要通过审批后才可以导出，就形成了一个复杂流程。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-14-55-32-%E7%94%B3%E8%AF%B7%E5%AF%BC%E5%87%BA.png" alt="申请导出.png" loading="lazy"></figure>
<p>再复杂的流程也是由一个个独立流程组成的，复杂流程中的独立流程就相当于独立流程中的步骤，方法是通用的。复杂流程中的四个要素是这样的：</p>
<ol>
<li>目的。各个参与者的任务是什么，总的任务是什么？</li>
<li>用户。参与者有哪些，各自的角色分工是什么？</li>
<li>步骤。子流程之间的流转关系是什么？</li>
<li>反馈。一个子流程出现了异常，其他的流程会如何应对？</li>
</ol>
<h2 id="2-页面流程">2、页面流程</h2>
<p>业务流程确定了之后，很多时候我们就开始做原型了，对于单一页面或小的业务流程，确实是可以的。但对于在多个页面之间流转的功能业务，在设计完整的原型页面之前，可以通过展示各个页面中的关键元素，以及串联页面关系的方式，来提前感知页面流程是否合理，从而去指导后续的原型和交互设计。</p>
<p>以拼多多的下单为例，拼多多在商品详情页可以进行单独购买、发起拼单、参与拼单三种下单方式操作。这三种方式的页面流向分别如下：</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/26-16-27-59-%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B.png" alt="页面流程.png" loading="lazy"></figure>
<p>通过页面流程图，可以快速的感知用户操作流程是否合理顺畅，提早发现流程中的问题进行优化；可以突出各个页面的重点元素，提前确定原型设计的注意点。以达到减少原型反复修改的目的，毕竟一套原型改起来也是不小的工作量。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（四）优先级]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-si-you-xian-ji/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-si-you-xian-ji/">
        </link>
        <updated>2020-02-13T11:23:57.000Z</updated>
        <content type="html"><![CDATA[<p>需求池搭建好了，需求也进来了，就该规划出实现需求的先后顺序了，然后再跟进需求顺序进行版本规划。</p>
<p>常见的需求分析模型有马斯洛需求层次理论和 KANO 模型，马斯洛需求层次理论一般用在产品的需求定位上，比如饿了么对应设立需求，微博对应归属需求。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-18-52-59-msl1.jpg" alt="msl1.jpg" loading="lazy"></figure>
<h2 id="1-kano-需求模型">1、KANO 需求模型</h2>
<p>KANO 模型是东京理工大学教授狩野纪昭（Noriaki Kano）发明的对用户需求分类和优先排序的有用工具，以分析用户需求对用户满意的影响为基础，体现了产品性能和用户满意之间的非线性关系。可以通过判断需求在坐标中的位置，得出相应的优先级。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-18-57-31-kano.jpg" alt="kano.jpg" loading="lazy"></figure>
<h3 id="11-基本型需求">1.1 基本型需求</h3>
<p>也叫必备型需求，是用户的痛点，也是用户对产品的最基本要求。产品有是应该的，没有就是不可接受的。比如路由器，它连续一年为我们提供网络服务我们也不会有什么感觉，可偶尔出现故障，那就是无法接受的。</p>
<h3 id="12-期望型需求">1.2 期望型需求</h3>
<p>也叫意愿型需求，是用户的痒点，是优秀产品的品质。比如路由器，早期大多数用户都为晦涩难懂的说明书烦躁过，希望路由器设置能简单一点。虽说这种功能没有也能凑合用，但有的话会极大的提高用户满意度。</p>
<h3 id="13-兴奋型需求">1.3 兴奋型需求</h3>
<p>也叫魅力型需求，是用户的爽点，是产品中用户没有想到，但令用户惊喜的点。比如我买的小米路由器，可以免设置的自动连接智能家居设备。这种功能没有也不会引起我的不满意，毕竟已经习惯了手机连 WiFi 也要输密码，智能家居也只用输一次而已。</p>
<h3 id="14-无差异需求">1.4 无差异需求</h3>
<p>无论有没有、好与坏，对用户都没有影响的需求。比如我的小米路由器，APP 里有个工具箱，里面列出了 19 个小功能，但除了路由器本身是设置之外，其他的功能有或没有、有多少个，都是无所谓的。</p>
<h3 id="15-反向型需求">1.5 反向型需求</h3>
<p>俗话说就是越做越错，就是实现了新的需求反而让用户更加的不满意。如果小米路由器天天给我推送优惠活动、社会新闻，那我对它的满意度绝对迅速下降。</p>
<p>基于 KANO 模型可以通过问卷的方式来收集用户对需求的态度，类似下表的格式：</p>
<table>
<thead>
<tr>
<th>需求</th>
<th>非常喜欢</th>
<th>能有更好</th>
<th>理应该有</th>
<th>有没有都可以</th>
<th>不喜欢</th>
</tr>
</thead>
<tbody>
<tr>
<td>路由器防蹭网功能</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="2-ice-评分">2、ICE 评分</h2>
<p>ICE 评分排序是由 Sean Ellis 发明的，“增长黑客”这个概念也是他提出的，ICE 评分排序的理念如下：</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/22-17-02-58-ICE%20Score.png" alt="ICE Score.png" loading="lazy"></figure>
<p>每个需求的 ICE 评分就等于<code>Impact x Confidence x Ease</code>，工作中可以使用类似下面的表格来进行评分和对比：</p>
<table>
<thead>
<tr>
<th>需求</th>
<th>I - 影响力</th>
<th>C- 信心</th>
<th>E - 难度</th>
<th>ICE 评分</th>
</tr>
</thead>
<tbody>
<tr>
<td>免密码自动连接</td>
<td>7</td>
<td>9</td>
<td>8</td>
<td>504</td>
</tr>
<tr>
<td>WiFi 红包</td>
<td>3</td>
<td>8</td>
<td>6</td>
<td>144</td>
</tr>
</tbody>
</table>
<p>还有一种 ICE 评分方法的扩展，叫做 RICE 评分，是在 ICE 评分的基础上增加了 Reach 即覆盖量的因素，RICE 的计算方式为：</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/22-17-11-05-rice.jpg" alt="rice.jpg" loading="lazy"></figure>
<p>RICE 里面的 E 变成了 Effort，其实也是工作量的意思，不必纠结。</p>
<h2 id="3-四象限法">3、四象限法</h2>
<p>四象限有多种划分方法，KANO 本质上也是个四象限，其他最常用的就是重要紧急四象限，还可以看需求的影响面、开发的难度等。不同的产品在不同的阶段对不同的需求参考的原则也可能略有不同。</p>
<h3 id="31-重要紧急">3.1 重要紧急</h3>
<ol>
<li>又重要又紧急。马上就要做的事情，但如果每天都在处理这类事情，那就说明工作安排是有问题的。</li>
<li>紧急但不重要。这样的事情可以做，但尽量的少做。</li>
<li>重要但不紧急。如果安排得当，大部分的工作都应该落在这个象限。</li>
<li>不紧急不重要。尽量的不要做。</li>
</ol>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-21-18-06-%E9%87%8D%E8%A6%81%E7%B4%A7%E6%80%A5.png" alt="重要紧急.png" loading="lazy"></figure>
<h3 id="32-roi">3.2 ROI</h3>
<p>ROI 是投资回报率的意思，通俗点说就是评估做这一件事值不值，投入和回报的关系。这里的投入和回报都是宽泛的概念，投入包括金钱、时间、资源等，回报也包括收益、口碑、市场等，ROI 可以综合起来评估，也可以细分的评估。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/23-15-08-22-roi.png" alt="roi.png" loading="lazy"></figure>
<h2 id="4-总结">4、总结</h2>
<p>优先级是需求与需求之间的竞争，而不是需求方和产品经理的竞争。如果做不好需求的优先级分级，就很容易进入“每天又忙又乱”的工作状态，而且每个人都在抱怨，因为每个需求方都会认为自己的需求是重要且紧急的。所以产品经理必须要搭建好需求池，安排好优先级，最后公开共享。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（三）拆解和需求池]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-fang-fa-he-you-xian-ji/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-fang-fa-he-you-xian-ji/">
        </link>
        <updated>2020-02-09T13:22:38.000Z</updated>
        <content type="html"><![CDATA[<p>前两篇了解什么是产品角度的需求和来源，以及怎么去主动收集需求，这篇就看看怎么分析需求，怎么决定一个需求要不要做，先做后做。</p>
<h2 id="1-拆解需求">1、拆解需求</h2>
<p>上篇说到，一个产品角度的需求 = 用户 + 场景 + 目的 + 任务，那分析一个需求要不要做、先做后做，就是从这个几个角度综合分析的。</p>
<h3 id="11-提需求的用户是不是产品的目标用户">1.1 提需求的用户是不是产品的目标用户？</h3>
<p>产品经理最害怕的不是用户需求多，而是老板需求多，因为老板大都把自己当做产品的用户。但任何一个产品都不可能适合所有人，产品一定有它的目标用户群，而一些老板需求就仅仅是老板个人需求，并不具备普遍性。</p>
<p>所以分析需求首先看提需求的用户是不是产品目标用户，如果不是，则大概率是要剔除的。</p>
<h3 id="12-用户的场景是不是典型使用场景">1.2 用户的场景是不是典型使用场景？</h3>
<p>比如笔记软件，用户想在某些场景下，邀请朋友一起编辑文档。这个用户需求本身并没有错，确实对他是有用的。但笔记软件的典型使用场景是个人记录，不是协同协作，所以这个需求大概率也要剔除。</p>
<h3 id="13-用户的目的是否必须得达成">1.3 用户的目的是否必须得达成？</h3>
<p>目标用户的典型场景下，需求好像就必须要做了，但我们可以再反问一下，能不能不做？不做的话影响有多少？</p>
<p>比如笔记软件的导出功能，用户想本地留备份肯定是没错的。但笔记不能导出也不会影响用户的使用，至少在产品的早期，这个需求是可以不被满足的。</p>
<h3 id="14-我们如何实现这个需求">1.4 我们如何实现这个需求？</h3>
<p>经过前面 3 个问题的论证，那这个需求就应该要做了。那实现这个需求要做哪些准备？需要用到什么资源？是否有什么限制？比如是否要用到第三方 SDK，研发实力能不能实现等。</p>
<h2 id="2-建立需求池">2、建立需求池</h2>
<p>经过需求的拆解分析，那些确定要做的需求就需要更为完整的记录下来，便于后续的迭代管理。那些暂时认为不该做的，在原始记录的基础上，添加上不做的原因，以便回溯。</p>
<p>我常用的需求池大概是这样的：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/23-19-22-28-pool.png" alt="" loading="lazy"></figure>
<ul>
<li>需求状态。需求正在处于哪个阶段，比如正在开发，还是在设计中。</li>
<li>所属模块。产品一般都会分为几个功能模块，便于组织整理。</li>
<li>需求任务。这里的任务就是用户需求转化为产品需求后，我们要做的事情。前面的编号是我自己起的，字母代表模块，数字代表模块内的需求编号。</li>
<li>优先级。需求肯定无法同时去进行的，必须制定出哪个先做哪个后做。优先级的制定下一篇会说。</li>
<li>计划版本。计划在后面的哪个版本更新中实现。</li>
<li>预计上线。计划的版本在什么时候上线。</li>
<li>需求来源。是用户的反馈，还是老板的需求，还是自己挖掘出来的。</li>
<li>提交时间。这个需求是哪一天提交的。</li>
<li>停留时长。自提交后，这个需求在需求池里呆了多少天了。</li>
<li>原始描述。提交需求的人，原话是如何描述的，包括文字、图片等。而前面的需求任务是产品经理对于原始描述拆解分析后，转化的开发任务。</li>
<li>备注。其他信息。</li>
</ul>
<p>其他的字段可以根据公司和产品的特点来增减，比如终端，电脑端还是手机端的需求，也可以通过两端使用两个需求池来处理。</p>
<p>而对于那些收到但决定不做的需求，是不进入需求池的，而是应该用其他的表格记录。比如记录好决定不做的理由是什么，是否反馈给了提交人。</p>
<p>除此之外 bug 也是不进需求池的，bug 在任何时候都是第一优先要去处理的，而需求池的目的是预先做好工作安排。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（二）用户调研]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-er-yong-hu-diao-yan/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-er-yong-hu-diao-yan/">
        </link>
        <updated>2020-02-06T11:19:52.000Z</updated>
        <content type="html"><![CDATA[<p>上一篇了解了什么是产品角度的需求，以及需求的来源和简单的记录，其中有一种需求来源需要产品经理去主动的获取，通过各种适合的方式去得到用户的反馈，就是用户调研。通过用户调研可以了解目标用户的使用场景和流程，获得目标用户的意见反馈，并根据调研结果去改进产品。</p>
<h2 id="1-用户调研过程">1、用户调研过程</h2>
<h3 id="11-明确调研的背景和目的">1.1 明确调研的背景和目的</h3>
<p>调研的背景就是我们为什么要做调研，产品遇到了什么问题，除了调研是否还有其他的解决方式？<br>
如果确定了需要做调研，就要明确目的是什么，我们通过调研要得出什么结论？这里说的结论是可转化为行动的结论，比如结论是增加一个 xx 功能，放弃某个新业务规划。而不该是一个宽泛的结论，比如结论是我们的产品比 x 竞品好，那这个结论如何指导我们的后续工作？</p>
<h3 id="12-选择调研方式">1.2 选择调研方式</h3>
<p>只要能达到调研目的，什么方式都可以，不必拘泥于理论。自然也不是每个产品每个公司都有条件去搞焦点小组，或者是现场观察用户的真实使用流程。</p>
<ol>
<li>问卷调查。成本最低，优点是样本数可以很大，缺点是无法深入，也很难保障数据的真实性。</li>
<li>数据验证。通过在产品中用户使用流程的轨迹埋点，或者是 AB测试，通过科学统计得到真实反馈。</li>
<li>用户访谈。与用户直接沟通，通过设计好的访谈问题可以了解到用户的真实想法和潜在需求。不限于面对面，电话或者视频都是可以的。</li>
<li>场景观察。通过观察用户真实的操作环境，直观了解用户的现实需求和业务流程。不限于必须在旁边观察，对于软件来说可以通过录屏的方式。</li>
</ol>
<h3 id="13-设计调研流程">1.3 设计调研流程</h3>
<p>根据选定的调研方式，设计出相应的调研流程。</p>
<ol>
<li>问卷调查。题目是最关键的，基于调研目的整理出主要的问题，可以先进行一论小范围的问卷，经过优化后再进行大范围调查。</li>
<li>数据验证。要埋的点有哪些，最终结论的计算公式是什么。</li>
<li>用户访谈。访谈过程的大体步骤，要问哪些问题，自己的话术，可以内部演练。</li>
<li>场景观察。预想用户操作过程中可能遇到的问题与解决方案，准备自己的提问。</li>
</ol>
<h3 id="14-选择调研用户">1.4 选择调研用户</h3>
<p>除了无差别的全面问卷调查，做用户调研也是对应的目标用户，因为不是每个用户都是典型用户，每个用户都可以被调研。</p>
<ol>
<li>根据调研目的，在所有用户中根据用户画像选定典型用户</li>
<li>在典型用户中，根据时间、地点、配合程度等因素选定目标用户</li>
<li>告知目标用户调研信息，如目的和方式，筛选出最终的调研用户</li>
</ol>
<h3 id="15-调研过程">1.5 调研过程</h3>
<ol>
<li>问卷调查。确定截止时间，想办法调动用户积极性，确保收集到足够的样本。</li>
<li>数据验证。不时的跟进查看，及时优化算法。</li>
<li>用户访谈。倾听为主，引导和鼓励用户多分享。</li>
<li>场景观察。观察用户行为和情绪，做好记录，对关键行为进行追问。</li>
</ol>
<h3 id="16-调研总结">1.6 调研总结</h3>
<p>无论是哪种调研方式，最后都是整理好用户的反馈，汇总得出与调研目的对应的结论。</p>
<h2 id="2-用户调研误区">2、用户调研误区</h2>
<h3 id="21-带有主观偏向性">2.1 带有主观偏向性</h3>
<p>在产品的规划中，你的老板想做 A，而你想做 B，你要通过用户调研得出结论，做 A 还是做 B？很有可能为了证明自己的正确性，在调研内容的设计中，无意识的带了引导性的词语或问题。同时也有可能在倾听或记录时，无意就放大了自己想听的。尽量确保调研内容是客观中立的，调研过程中主观的只有用户。</p>
<h3 id="22-直接问用户要什么">2.2 直接问用户要什么</h3>
<p>对于同一个问题，在不同的场景下，得到截然不同的答案，其实是很正常的。比如索尼音箱的例子，用户都说喜欢黄色，但从黄色和黑色选择的时候，大部分又都选择了黑色。在访谈和观察中，要通过用户行为和情绪得到答案，而避免直接去问。</p>
<h3 id="23-把单一问题当整体问题">2.3 把单一问题当整体问题</h3>
<p>有些用户是非常有热情的，描述的场景和问题时也很有感染力，无形之中就加大了某个需求的比重，进而影响我们把这个问题的级别提高了，可能我们都会劝自己“虽然这个问题提的少，但对用户很重要”。</p>
<h3 id="24-教用户怎么用">2.4 教用户怎么用</h3>
<p>和我们教父母使用智能机不一样，在场景观察中其实是用户通过行为和情绪，来教我们怎么去提高和优化产品。我们在用户旁边不是要去教这一个用户怎么正确的使用产品，而是通过这一个用户帮我们认识到产品的普适缺陷。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[需求分析（一）定义和来源]]></title>
        <id>https://ghysrc.github.io/post/xu-qiu-fen-xi-ding-yi-he-lai-yuan/</id>
        <link href="https://ghysrc.github.io/post/xu-qiu-fen-xi-ding-yi-he-lai-yuan/">
        </link>
        <updated>2020-02-01T11:20:40.000Z</updated>
        <content type="html"><![CDATA[<p>工作几年一直没有系统的梳理过自己学习或积累的知识技能，而真正只有把知识以自己的语言讲出来后，才真正的是自己的。在边写边思考的过程中，一个个知识点就会自动的跟你过去的一件件任务对应起来，意识到自己曾经犯了什么错误，而又做对了什么。</p>
<p>对于产品经理来说，所有的工作任务都是从需求出发的，做一个产品是老板的需求，产品的目的是满足用户的需求，用户的需求要通过哪种形式来实现等等，所以就从需求开始说起。</p>
<h2 id="1-什么是需求">1、什么是需求</h2>
<p>从个人角度看，需求是为了达到某个目的而产生的欲望，比如我要去跑步，从表面上看，跑步好像就已经是目的了，可我为什么要去跑步呢？为了锻炼身体增强体质，那目的就是身体健康；为了陪女朋友一起跑，那陪女朋友才是目的。<br>
产品经理要做的，就是把个人角度的需求，经过理解和分析，转化成产品角度的需求。从产品角度看，<code>需求 = 用户 + 场景 + 目的 + 任务</code>，分解来看：</p>
<ul>
<li>用户。谁的需求？他在产品中的角色是什么？是领导还是员工？</li>
<li>场景。在什么情况下的需求？办公室还是通勤路上，电脑还是手机？</li>
<li>目的。想要达成什么目的？</li>
<li>任务。产品上要如何满足这个需求？<br>
大部分的用户需求都是不能直接转化为产品需求的，一定要经过分析之后，明确产品角度需求的各个元素，然后再进入是否要做的分析流程。</li>
</ul>
<h2 id="2-需求的来源">2、需求的来源</h2>
<h3 id="21-团队内部">2.1 团队内部</h3>
<ol>
<li>老板。团队内部需求最多的当属老板了，毕竟产品的核心理念是老板的，最容易发散出各种需求。</li>
<li>产品部。有心的产品经理和设计师也会在自己对产品的理解和规划下，提出不少需求。</li>
<li>其他部门。比如运营和销售，考虑对自身业绩的影响，也会有自己的需求。</li>
</ol>
<h3 id="22-用户反馈">2.2 用户反馈</h3>
<ol>
<li>开放渠道。比如应用市场的用户评价，微博上的吐槽。</li>
<li>半开放渠道。比如用户的朋友圈或相关的群。</li>
<li>内部渠道。比如通过客服的反馈，产品自带的在线反馈。</li>
</ol>
<h3 id="23-用户调研">2.3 用户调研</h3>
<p>通过调研过程中的访谈和用户行为反馈得到的需求。</p>
<h3 id="24-竞品">2.4 竞品</h3>
<ol>
<li>竞品的已有功能</li>
<li>竞品的新功能</li>
<li>竞品的用户反馈</li>
</ol>
<h2 id="3-记录需求">3、记录需求</h2>
<p>收集到的需求该如何记录，仍然是从产品角度<code>需求 = 用户 + 场景 + 目的 + 任务</code>来做到最原始的记录。</p>
<table>
<thead>
<tr>
<th>需求名称</th>
<th>用户</th>
<th>场景</th>
<th>目的</th>
<th>任务</th>
</tr>
</thead>
<tbody>
<tr>
<td>评论时想发图片</td>
<td>年轻用户</td>
<td>评论时想到了非常切题的表情包</td>
<td>懒得打字，直接好玩的表情包评论</td>
<td>评论系统支持图片</td>
</tr>
<tr>
<td>自动导出员工报表</td>
<td>企业领导</td>
<td>月底要导出进行绩效评定</td>
<td>免去每月手动导出，可以定时并自动</td>
<td>定时导出到用户绑定邮箱</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用主题定义新年计划]]></title>
        <id>https://ghysrc.github.io/post/yong-zhu-ti-ding-yi-xin-nian-ji-hua/</id>
        <link href="https://ghysrc.github.io/post/yong-zhu-ti-ding-yi-xin-nian-ji-hua/">
        </link>
        <updated>2020-02-01T09:31:36.000Z</updated>
        <content type="html"><![CDATA[<p>这一篇是来自 Youtube 频道 CGP Grey 的一个视频，<a href="https://youtu.be/NVGuFdX5guE">Your New Year's Resolution Has Already Failed</a> ，说的是可以尝试用“主题”去制定新年计划，而不总是目标。</p>
<p>新年刚过，可能你的新年计划正在执行，但大概率可能已经有失败的苗头了。比如这样：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/01-16-54-25-2020.jpeg" alt="2020.jpeg" loading="lazy"></figure>
<p>当然今年因为疫情的缘故，图上的目标就少了点搞笑多了点心酸。可确实我们的新年计划总是在美好的计划中就失败了或忘记了。逐渐就变成，新年计划就只是用在新年的，难以被实现。在这个视频中建议大家可以试试给新的一年定义一个“主题”。</p>
<p>一般的新年目标是一年减掉 20 斤、一年读 30 本书，我们可以试着定义为“健康年”或“阅读年”。听起来好像是更宽泛了，目标不明确了。但对于我们自制力不强的人来说，最重要的是行动趋势，而不是数字。只要我们在一年之中，去关注到了健康和阅读，哪怕只减掉 4 斤、只读了 6 本书，这仍然是在往好的方向发展。</p>
<p>主题的优点就在于不明确什么时候该去执行计划，但实际又什么时候都可以。比如在通勤路上，你可以像平时一样刷抖音，但想到是阅读年，是不是就可以换成看几页书。如果是一年读 30 本书，就会感觉像是任务，就要去刻意安排时间去做，增加了负担。</p>
<p>只要我们在相对的变好，就是一件好事。未来的事是很难规划的，假设我们制定了每周去两次健身房，但却因为运动受伤了。那我们就只能搁置或放弃这个新年目标。可如果是健康的主题，就算不能去运动，我们也可以在食物、作息上去改善健康。</p>
<p>正因为主题是宽泛的，我们可以在主题下做很多事情，而不局限于一种形式。</p>
<p>对于主题目标，我们可以让时间跨度更短，一年太长，我们可以试试主题季度、主题月、甚至是主题周。主题季度我们可以和大自然一起做一些主题调整，比如冬天长时间宅家的时候可以调整为阅读季度，而春天适合外出的时候可以调整为健身季度。当然我们也可以根据自己当前所处的情况和状态去调整主题。</p>
<p>我个人会把这一年定义为“知识年”，不局限于读几本书，听听课、看看科普、与合适的人沟通，都可以获得知识。在此立个 flag，明年来看。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次失败的头脑风暴会议]]></title>
        <id>https://ghysrc.github.io/post/yi-ci-shi-bai-de-tou-nao-feng-bao-yin-fa-de-si-kao/</id>
        <link href="https://ghysrc.github.io/post/yi-ci-shi-bai-de-tou-nao-feng-bao-yin-fa-de-si-kao/">
        </link>
        <updated>2019-10-23T13:15:42.000Z</updated>
        <content type="html"><![CDATA[<p>几天前，我的老板组织了一次头脑风暴会议，不得不说这一个多小时的头脑风暴是比较失败或无意义的：</p>
<ol>
<li>议题不开放。以何种方式在软件中中应用工时？议题本身是开放的，但却在开始讨论前讲了很多预设信息，框定了讨论范围。</li>
<li>人员不匹配。工时的议题是需要一点相关的知识或理解的，但为了会议的开放性，同时召集了销售和客服人员，且没有提前告知。会议上给他们讲一些相关内容就会限制思维，而不讲的话又难以参与进来。</li>
<li>气氛不轻松。老板作为会议主持人，很难营造出轻松的气氛，会议过程主要是指定发言，并没有形成开放性的畅所欲言。</li>
<li>即时判定。由于老板对产品理念相对更为了解，对于参会人员提出的想法，对第一反应不太行的想法下意识的就做出了否定。</li>
<li>一家之言。议题最后的结论是会议结束前 20 分钟技术主管进来提出的，抛开结论的正确与否，但难免让参会人员感觉在做无用功。<br>
究其根源呢其实就是老板以为自己理解头脑风暴，毕竟字面意思很好理解，就是多动脑子、发散思维、集思广益。这个理解是没有错的，但关键在于漏了一个字：<code>法</code>。头脑风暴是一种集体研讨的行为方法，是方法就有执行的原则、过程和要点。</li>
</ol>
<h2 id="1-定义">1、定义</h2>
<p>头脑风暴法（Brain storming），是指由美国BBDO广告公司的奥斯本首创，该方法主要由价值工程工作小组人员在正常融洽和不受任何限制的气氛中以会议形式进行讨论、座谈，打破常规，积极思考，畅所欲言，充分发表看法。</p>
<h2 id="2-头脑风暴前">2、头脑风暴前</h2>
<p>头脑风暴字面看起来就是要发散、随意、灵活，就像灵感一样，说来就来。可组织头脑风暴的会议是需要提前准备的，“10 分钟后我们头脑风暴一下”这种模式是不可取的。</p>
<p><strong>2.1 会议主题</strong><br>
头脑风暴是要打破常规、集思广益，但头脑风暴会议主题必须是明确的，在明确且认知统一的议题之下，进行发散思考。议题不明确，就容易造成什么都可以说，但最后发现大部分都没什么用，并没有产生多少实质性的结论。同时也忌讳议题过大过广，比如少以“我们如何超越竞品？”为议题，而多以“我们的客户服务如何超越竞品？”为议题。</p>
<p><strong>2.2 会议人员</strong><br>
明确了会议主题，就要根据这个主题来选定合适的参会人员。人员的身份角色需要多样化，比如产品、技术、运营、客服、售后等，但也要避免为了多样化而凑人数。然后提前把头脑风暴的议题告知参会人员，让与会者有所准备。<br>
头脑风暴会议还需要有一个主持人，主持人要了解议题且熟悉头脑风暴法，在会议过程中可以将跑偏的会议及时纠正回来。尽量避免领导层做主持人，会给参会人员压力，容易把会议变成领导的宣讲与提问。</p>
<p><strong>2.3 会议时间</strong><br>
除了要提前确定什么时间召开头脑风暴会议之外，还要提前确定会议的时长，俗话说 Deadline 是第一生产力。当然也并不是建议头脑风暴在有时间压力的前提下进行，而是要去提高会议效率，不能因为没有发现足够好的思路就让会议一致持续下去。</p>
<h2 id="3-头脑风暴中">3、头脑风暴中</h2>
<p><strong>3.1 开场</strong><br>
主持人进行议题的介绍和会议目的，起初需要主持人去询问部分的参会人员来表达个人观点，进而去带动更多的人去主动思考、分析观点。</p>
<p><strong>3.2 记录</strong><br>
指定一人对会议中每个人提出的每个观点进行记录，并不时的统计和公布观点数量，激励参会人员提出更多的观点。</p>
<p><strong>3.3 原则</strong></p>
<ul>
<li>自由畅谈。参会人员不受任何限制的畅享畅谈，头脑风暴中所有的观点都平等看待。</li>
<li>延迟评价。无论是谁，在会议中不对观点进行评判，避免打击积极性。</li>
<li>追求数量。头脑风暴会议是首要目的就是收集尽可能多的观点，会议产生的观点越多，出现创新性的观点概率就越大。</li>
</ul>
<h2 id="4-头脑风暴后">4、头脑风暴后</h2>
<p>会议结束后对记录的观点进行梳理总结，筛选其中有效有创新性的观点，筛选时要避免自己对议题的主观偏向影响结果，必要时可两组人同时筛选。然后组织会议对筛选后的观点进行综合的评价讨论和分析，进而判定是否需要进入下一阶段。</p>
<h2 id="5-总结">5、总结</h2>
<p>不同的企业和团队，因产品和组织的差异，实行头脑风暴法时都需要进行适当的调整和摸索，以便找出最有效的方式。最后一图总结：<br>
<img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/21-15-14-26-%E5%A4%B4%E8%84%91%E9%A3%8E%E6%9A%B4.png" alt="头脑风暴png" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[蚂蚁分工竞品分析]]></title>
        <id>https://ghysrc.github.io/post/ma-yi-fen-gong-jing-pin-fen-xi/</id>
        <link href="https://ghysrc.github.io/post/ma-yi-fen-gong-jing-pin-fen-xi/">
        </link>
        <updated>2019-08-07T08:16:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-前言">1、前言</h2>
<h3 id="11-行业背景">1.1 行业背景</h3>
<p>数字化办公是科技发展带来的必然结果，数字化办公能让企业的工作更便利、更快捷，覆盖的范围也更广。其中针对企业内部协同办公的需求，诞生了很多优秀的线上协同产品，如 Tower、Teambition 等。随着 2014 年钉钉的出现，截止目前已经有超过 1000 万家企业在使用钉钉，无数的企业将通过钉钉来实现全面的数字化办公。在钉钉上，除了钉钉本身提供的即时通讯、考勤打卡、人事管理等功能之外，钉钉也搭建了开放平台，通过连接第三方 SaaS 服务商，来给入驻企业提供更多更全面的数字化办公服务。</p>
<h3 id="12-市场规模">1.2 市场规模</h3>
<p>结合T研究推出的《中国SaaS产业研究报告》的数据来看，从2015年企业服务元年开始至2018年的四年内，国内协同办公市场规模呈逐年扩大趋势，但年复合增长率逐步放缓，行业发展的增长后劲薄弱。2018年，中国协同办公市场规模为459.5亿元。但前瞻认为，在我国中小企业数量庞大的背景下，5G时代的到来，先进技术将颠覆过往，有望将生产控制、工作协同线上化，企业需要智慧管理组织催生的行业需求前景广阔。预计2020年中国协同办公市场规模将突破500亿元，接近600亿元的水平。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-05-21-2019%E5%8D%8F%E5%90%8C%E5%8A%9E%E5%85%AC%E5%B8%82%E5%9C%BA%E8%A7%84%E6%A8%A1.png?token=AA7EYQGS7QDTLFHIAA7ETT26JY7AC" alt="2019协同办公市场规模png" loading="lazy"></figure>
<h3 id="13-pest-分析">1.3 PEST 分析</h3>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-01-01-PEST.png?token=AA7EYQB2XJ4BN3P24XS6PSC6JY6P2" alt="PESTpng" loading="lazy"></figure>
<h2 id="2-明确竞品">2、明确竞品</h2>
<h3 id="21-分析目的">2.1 分析目的</h3>
<p>协同办公作为一个刚需且高频的需求，同类应用在钉钉中的竞争比较激烈。蚂蚁分工想要保持持续增长，就要了解竞品的业务形态、功能结构以及差异点。同时明确自己的优势和劣势，进而优化产品并提高转化。</p>
<h3 id="22-选取竞品">2.2 选取竞品</h3>
<p>钉钉应用中心归属于“团队协同”类的有以下应用：</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-05-33-%E5%8D%8F%E5%90%8C%E7%B1%BB.png?token=AA7EYQFPVS4WXH2CAA7BICK6JY7A4" alt="协同类png" loading="lazy"></figure>
<p>其中真正以项目管理为核心功能的，只有 Teambititon、任务管家、功倍、日事清、星任务Pro。星任务Pro已经有几个月没有更新，且用户反馈联系不到客服，所以剔除。功倍从产品定位和宣传上都主要面向的是电商行业，不算是要做通用的项目管理应用，而日事清与功倍从源头上隶属同一家公司，产品形态上也极为相似，所以同时剔除功倍和日事清。</p>
<p>除了应用中心的第三方协同应用之外，钉钉自身还提供了一个叫项目空间的服务，虽然目前还处于 beta 版本，但从产品定位和目前的形态上看，一定是协同类有力的竞争者。</p>
<p>最终选定 <strong>Teambition、任务管家、项目空间</strong> 来做竞品分析。</p>
<h2 id="3-竞品分析">3、竞品分析</h2>
<h3 id="31-产品定位">3.1 产品定位</h3>
<p>通过查看钉钉应用中心的简介，几个应用都具有项目规划、协同工作、进度管理功能，核心功能比较一致。</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>Teambition</td>
<td>规划管理项目，跟踪任务进度，高效实现团队目标</td>
</tr>
<tr>
<td>任务管家</td>
<td>集工作安排、进度审核、甘特图于一体，为提高企业效率而生</td>
</tr>
<tr>
<td>项目空间</td>
<td>轻量级项目协同工具</td>
</tr>
<tr>
<td>蚂蚁分工</td>
<td>项目有序分工，任务高效协作；甘特图进度管理</td>
</tr>
</tbody>
</table>
<p>从几家应用开放的客户案例来看，全部都提供了多个行业的案例，其中 Teambition 最为丰富。</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>案例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Teambition</td>
<td>15 个知名企业在不同行业、场景与职能的案例</td>
</tr>
<tr>
<td>任务管家</td>
<td>集工作安排、进度审核、甘特图于一体，为提高企业效率而生</td>
</tr>
<tr>
<td>项目空间</td>
<td>3 个行业案例：设计、旅游、教育</td>
</tr>
<tr>
<td>蚂蚁分工</td>
<td>项目有序分工，任务高效协作；甘特图进度管理</td>
</tr>
</tbody>
</table>
<p>总结：<strong>几款应用都定位于通用的项目管理软件，想要适应不同行业、不同规模的企业和团队。</strong></p>
<h3 id="32-产品功能">3.2 产品功能</h3>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-05-52-Teambition.png?token=AA7EYQCCWIAQOEJE37224Q26JY7CA" alt="Teambitionpng" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-05-59-%E9%A1%B9%E7%9B%AE%E7%A9%BA%E9%97%B4.png?token=AA7EYQBE53C6ZFHQ3GFL4Z26JY7CO" alt="项目空间png" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>功能对比</th>
<th>蚂蚁分工</th>
<th>Teambition</th>
<th>任务管家</th>
<th>项目空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>项目分组</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>项目搜索、排序</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>多项目统计</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>复用项目</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>工作流项目</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>项目模板</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>导入任务</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>任务清单</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>周期性任务</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>批量修改任务</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>任务看板</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>任务表格</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>工时统计</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>任务权限</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>任务验收</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>应用功能权限</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>任务日历</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>超级管理员</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>日程</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>任务同步群聊</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>自定义字段</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>文档系统</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>拖拽体验</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>英文版</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>应用插件</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<p>总结：项目管理中通用的基础功能几款应用都具备，通过对比上表中列出的各种差异功能点可以看出，<strong>Teambition 是最为全面的一款项目管理应用，任务管家次之。而定位轻量仅仅是 beta 版本的项目空间也已经有取舍的实现了大多数协同功能，加上钉钉团队的研发能力和资源支持，以及免费提供来看，会吸引钉钉入驻企业的很大一部分用户。而蚂蚁分工可以说是处于落后，需要提高迭代速度和优化产品体验。</strong></p>
<h3 id="33-产品体验">3.3 产品体验</h3>
<p>项目管理中广泛应用的一个理论就是戴明循环，也就是 PDCA 循环，这里也就依照这个路径来体验各个应用的任务协同过程，发现其中的优缺点。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-12-pdca.png?token=AA7EYQGYV6MAQ3XHY3NUZ5C6JY7DI" alt="pdcapng" loading="lazy"></figure>
<p><strong>1、Plan（计划），定目标定计划</strong></p>
<p>Teambition 创建任务会打开一个小窗口，选择项目和输入任务名称后即可创建，同时也可以一并设置负责人、起止时间、任务描述、任务提醒、是否重复等信息。比较方便的是可以“自动填写上次未提交的信息”以及“完成并创建下一个”。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-19-tbtask1.png?token=AA7EYQHC73RLWEJWEYKJLZK6JY7DY" alt="tbtask1png" loading="lazy"></figure>
<p>任务管家在创建任务时会打开一个信息完整的大窗口，所有任务相关字段全都一次性显示，并且在创建任务时就可以同时设置审批等相对高级的信息。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-26-rwgjtask1.jpg?token=AA7EYQDLQ6IFMBOWBIB4C4K6JY7EC" alt="rwgjtask1jpg" loading="lazy"></figure>
<p>项目空间创建任务最为轻便，直接输入任务名称即可，同时支持@人员即为指派负责人，任务的更多内容需要创建完成后打开任务详情补充填写。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-42-xmkjtask1.png?token=AA7EYQBIK53AS5ONYTCMGMS6JY7FA" alt="xmkjtask1png" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-46-xmkjtask2.png?token=AA7EYQDFHH4WGWJPSJCVWP26JY7FK" alt="xmkjtask2png" loading="lazy"></figure>
<p>总结：几款应用都可以在创建任务时明确工作计划，即谁负责在什么时间做什么事情，但体验各不相同。其中<strong>任务管家</strong>可填写的信息最为全面，但也<strong>提高了用户的使用成本</strong>。<strong>Teambition</strong> 将最为关键和常用的信息直接显示，隐藏了一部分内容，<strong>用户操作较为灵活</strong>。<strong>项目空间</strong>的录入体验很好，但指派任务和设定时间是分离的两部操作，<strong>需要一定的适应</strong>。</p>
<p><strong>2、Do（执行），按计划有效实施</strong></p>
<p>任务的执行过程主要都是在应用之外进行的，几款应用在线上对任务过程的节点记录及沟通记录都较为完整。比如任务的各种变化都有日志记录，用户也可以在任务下进行讨论沟通。<strong>其中比较优秀的是项目空间，任务的讨论和变化可绑定群聊，可以做到实时推送所有项目成员或任务相关人员。</strong></p>
<p><strong>3、Check（检查），验证执行成果</strong></p>
<p>对于任务的成果检查，除了 Teambition 之外，都具有检查不通过就不能完成任务的功能设定。</p>
<p>项目空间提供了给任务添加检查项的功能，检查项不通过，任务就无法完成。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-06-58-xmkjjc1.png?token=AA7EYQCEXH2GNPQ2JBSVSI26JY7GE" alt="xmkjjc1png" loading="lazy"></figure>
<p>任务管家则提供了完成审批的功能，负责人完成任务后，需要经过完成审批，审批通过任务才真正完成。</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-04-%E4%BB%BB%E5%8A%A1%E7%AE%A1%E5%AE%B6%E5%AE%8C%E6%88%90%E5%AE%A1%E6%89%B9%E6%B5%81%E7%A8%8B.png?token=AA7EYQDXQGIR2L4UO343QVK6JY7GM" alt="任务管家完成审批流程png" loading="lazy"></figure>
<p>总结：<strong>Teambition 没有对任务成果检查的功能。任务管家则与钉钉自身提供的审批结合，通过审批流程实现了任务的成果检查。项目空间通过添加检查项的方式，可以实现多人公共检查的效果。</strong></p>
<p><strong>4、Act（处理），标准化过程中的有效措施，以规避过程中的问题</strong></p>
<p>用户对于任务协同过程中需要纳入标准化任务的内容，可通过自定义任务字段的功能来实现，这里所选的几款应用都提供了这样的功能。</p>
<p>Teambition 可添加多个自定义字段，自由设置字段的名称、数据类型和所属分类。不同的字段组合还可以保存为不同的任务类型，便于在创建时切换。</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-20-tbzd1.png?token=AA7EYQEFWB5BA52L4P3BVLS6JY7HO" alt="tbzd1png" loading="lazy"></figure>
<p>除此之外对于需要阶段流转的任务提供了工作流的功能。</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-26-tbgzl.png?token=AA7EYQGKLFEGXQEBCY34MD26JY7H2" alt="tbgzlpng" loading="lazy"></figure>
<p>项目空间提供了和 Teambition 相似的功能，可以添加自定义字段，也可以保存为任务类型。</p>
<p><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-36-xmkjzd1.png?token=AA7EYQA3Y2JYSMB6UL62SO26JY7IO" alt="xmkjzd1png" loading="lazy"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-41-xmkjzd2.png?token=AA7EYQELKXO3YIJTIQTGHES6JY7I2" alt="xmkjzd2png" loading="lazy"></p>
<p>任务管家则提供的自定义表单的方式，设置好不同类型的表单，在创建任务时调用表单。</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-49-%E4%BB%BB%E5%8A%A1%E7%AE%A1%E5%AE%B6%E9%80%89%E6%8B%A9%E8%A1%A8%E5%8D%95.png?token=AA7EYQG3KQG5VDWHVYXJELC6JY7JI" alt="任务管家选择表单png" loading="lazy"></figure>
<p>总结：<strong>Teambition 和项目空间的功能设计和使用方式较为相似，Teambition 对于任务类型的应用更为合理，体验更好。任务管家的设计思路是通过自定义表单让一个普通任务的信息更丰富功能更强大，但不好的一点就是应用本身提供的字段，无论用户是否需要，都会一直存在且优先展示给用户。而蚂蚁分工在最后一个环节目前是缺失的，无法帮助用户标准化流程。</strong></p>
<h2 id="4-商业模式分析">4、商业模式分析</h2>
<h3 id="41-盈利模式">4.1 盈利模式</h3>
<p>除项目空间为免费应用外，几款应用都是通过给企业提供项目管理的 Saas 服务，来按年按人数来收取服务费。</p>
<figure data-type="image" tabindex="16"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-07-57-price.png?token=AA7EYQCJGFFHMENIT3HDNAK6JY7KO" alt="pricepng" loading="lazy"></figure>
<h3 id="42-运营模式">4.2 运营模式</h3>
<table>
<thead>
<tr>
<th>产品</th>
<th>运营模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Teambition</td>
<td>作为运营多年的一款产品，在上架钉钉之前已经是一款成熟且有良好口碑的产品，在钉钉上基本处于自增长的模式</td>
</tr>
<tr>
<td>任务管家</td>
<td>作为第三方服务商，积极参与钉钉组织的运营线上及线下活动；提供不限人数价格便宜的入门版吸引用户使用，再通过高级功能转化一部分</td>
</tr>
<tr>
<td>项目空间</td>
<td>通过显眼的一级入口，项目空间可以最快触达用户；上线正式版后应该会跟钉钉自身的产品能力绑在一起宣传</td>
</tr>
<tr>
<td>蚂蚁分工</td>
<td>作为第三方服务商，积极参与钉钉组织的运营线上及线下活动；提供不限人数价格便宜的入门版吸引用户使用，再通过高级功能转化一部分</td>
</tr>
</tbody>
</table>
<h2 id="5-竞争策略">5、竞争策略</h2>
<h3 id="51-swot-分析">5.1 SWOT 分析</h3>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/02/20-16-08-16-SWOT.png?token=AA7EYQEKVU4IIWGMEKKFQ6K6JY7LE" alt="SWOTpng" loading="lazy"></figure>
<h3 id="52-迭代策略">5.2 迭代策略</h3>
<ol>
<li>提高研发团队自身技术水平，以提高产品迭代速度和产品质量</li>
<li>对企业定制业务更加开放</li>
<li>利用自身传统行业的经验，推出针对性的垂直行业协同产品</li>
<li>考虑钉钉平台之外的可能性</li>
<li>探索众包业务</li>
</ol>
<h3 id="53-运营策略">5.3 运营策略</h3>
<ol>
<li>钉钉官方的运营活动保持积极参与，争取在协同类目榜单中保持靠前的位置</li>
<li>在合适的时机推广自己的定制业务，增加营收</li>
<li>在运营宣传中适当增加蚂蚁分工与传统行业更契合的内容</li>
</ol>
<h2 id="6-总结">6、总结</h2>
<p>综合对比来看，蚂蚁分工相比其他几款应用在不同的方面都有大大小小的差距，包括功能的丰富性和产品的体验性，总体来说是一个挑战。而协同办公的市场规模和发展趋势对蚂蚁分工也是个不小的机遇。只要能及早的把短板补齐，做好产品差异化的同时增加业务线，是可以在市场中立足的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《上瘾》- 培养用户习惯]]></title>
        <id>https://ghysrc.github.io/post/lesslessshang-yin-greatergreater-pei-yang-yong-hu-xi-guan/</id>
        <link href="https://ghysrc.github.io/post/lesslessshang-yin-greatergreater-pei-yang-yong-hu-xi-guan/">
        </link>
        <updated>2018-05-05T06:52:57.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ghysrc/ImageStorage/master/2020/03/06-15-22-19-s294361631.jpg" alt="s294361631.jpg" loading="lazy"></figure>
<p>做产品一直在说的培养用户习惯，就是让用户反复的使用产品，形成对产品的依赖性，甚至做到让用户无意识的就打开了产品，这就是用户对产品“上瘾了”。</p>
<p>我的某同事外卖一到就打开了头条，某朋友一上公交车就打开了抖音，我自己晚上一躺下就打开了 B 站...这些都是习惯的力量。在这些场景中，几乎没有经过任何考虑，无意识的就打开了这些产品。而这些无意识行为，其实都是被一步步设计出来的，方式就是在产品中使用了 <code>上瘾模型</code> 。</p>
<h2 id="1-什么是上瘾模型">1、什么是上瘾模型</h2>
<p>书中将上瘾模型分解为四个步骤：</p>
<ol>
<li><strong>触发</strong>，通过触发来接触到并引导用户使用产品。</li>
<li><strong>行动</strong>，让用户在产品中完成行为任务。</li>
<li><strong>奖励</strong>，通过奖励来鼓励用户行为。</li>
<li><strong>投入</strong>，让用户在产品中不停的投入更多。</li>
</ol>
<p>以书中提到的早期滴滴为例：用户通过广告或朋友推荐下载了滴滴，通过滴滴用户打到了车，滴滴给了用户补贴奖励，用户的打车习惯、常用地址就记录在了滴滴上。通过反复的循环，如今说到打车就几乎等于打开滴滴。</p>
<p>起初的滴滴通过免费甚至是倒贴的形式培养用户打车习惯，而用户都理智的认为自己只是去占便宜才使用滴滴打车，没红包就不用了。可习惯一旦养成，用户对价格的敏感性就会降低，所以就算后来滴滴收紧补贴甚至高峰涨价，用户也只是一边抱怨滴滴不再划算一边继续使用滴滴。</p>
<p>而滴滴能培养出用户习惯，一是用户使用频率高，有打车需求的人天天都会使用；二是可感知的产品优势，即用户肯定会不时的去尝试其他的打车产品，但滴滴车辆多就是最大的优势，滴滴能让用户打到车的概率是高于其他产品的。</p>
<h2 id="2-触发提醒用户使用产品">2、触发，提醒用户使用产品</h2>
<p>我们通常看到的各种广告推送、朋友圈的传播都是触发的不同形式。触发可以分为两种类型，外部触发和内部触发。</p>
<p>外部触发，是通过将信息渗透在用户生活的各个方面，来引导用户采取下一步行动：</p>
<ul>
<li>付费型触发，比如每年 618 和 双11 各种广告就会不停的提醒你，赶快使用京东淘宝</li>
<li>回馈型触发，比如你的产品被主流媒体报导了，或是在 App Store 排名很高，就会更容易触达到用户</li>
<li>人际型触发，比如通过产品邀请好友注册、口碑传播，做的好可能引发病毒性传播</li>
<li>自主型触发，比如用户自己没事在应用市场看到并下载了你的产品</li>
</ul>
<p>内部触发，通过用户记忆存储中的各种关联来提醒用户采取下一步行动。内部触发主要是通过情绪触发，无聊时刷抖音、孤单时听听伤感的歌、开心时发个朋友圈。</p>
<p>搭建产品的上瘾模型要揣摩用户心理，了解有哪些可能成为内部触发的情绪，同时也要知道如何利用外部触发来提醒用户。</p>
<h2 id="3-行动期待奖励时的直接反应">3、行动，期待奖励时的直接反应</h2>
<p>通过触发让用户打开了你的产品，接下来就是让用户在产品中产生行为。书中提到的福格行为模型表明，要让人行动起来，就必须要有充分的行为动机以及完成行为的能力。</p>
<p>动机。可以理解为我们平时说的产品能解决什么问题，即用户为什么要使用你的产品。产品提供的服务用户不需要或不满足，就会让用户没有动机。书中总结一般能驱使用户采取行动的核心动机有三类：</p>
<ul>
<li>追求快乐，逃避痛苦；比如游戏让用户快乐，药物让用户减少痛苦</li>
<li>追求希望，逃避恐惧；比如报班为了涨技能涨工资，购买保险为了降低发生意外的后果</li>
<li>追求认同，逃避排除；比如知乎回答可以获得赞同，刷微博可以避免与朋友聊不到一起</li>
</ul>
<p>能力。可以理解为用户需要付出多少才能完成产品中的行为。工作中说的用户使用成本太高，就是对用户的行为能力提高了要求。一个行为的难易程度，主要是以下六个因素：</p>
<ul>
<li>时间，完成行为需要花多少时间</li>
<li>金钱，完成行为需要多少经济投入</li>
<li>体力，完成行为要耗费多少体力</li>
<li>脑力，完成行为的复杂度有多少</li>
<li>社会偏差，其他人对该行为的接受度</li>
<li>非常规性，该行为与常规行为之间的匹配度和矛盾度</li>
</ul>
<p>在产品中降低这些因素的消耗，用户完成行为的能力就会相对的提高。比如现在的注册登录都可以通过社交账号一键登录，而不再是以前的邮箱密码；一张风格化的照片使用滤镜就可以一键生成，而不再需要专业的修图技能。</p>
<h2 id="4-奖励多变的奖励激发使用欲">4、奖励，多变的奖励激发使用欲</h2>
<p>用户使用产品，在产品中产生行为，都是要去实现一个目的，这个目的就是产品对用户的“奖励”，产品提供的让用户感兴趣的信息、收到的赞、愉快的心情等都是奖励。在表现形式上奖励可以分为三类：</p>
<ul>
<li>社交奖励，用户在产品中通过与人的互动而获得的人际奖励，比如找到同类、获得认同、受人喜爱等</li>
<li>猎物奖励，用户在产品中获得的资源或信息。比如玩游戏开宝箱、刷微博吃瓜等</li>
<li>自我奖励，用户在产品中得到的操控感、成就感和终结感。比如游戏获得更高的称谓、学习类产品获得技能等</li>
</ul>
<p>产品除了要提供用户需要的奖励之外，奖励本身还得是多变的。结果的不确定性会降低用户行动意愿，一项任务有可能失败那有一部分用户就压根不愿意开始；但奖励的不确定性能让用户产生更多的行动，不一样的奖励可以持续的给用户新的刺激，而恒定不变的奖励待用户习惯后就无法形成有效刺激。</p>
<p>以推荐算法为例，产品会根据我的浏览记录来不停的缩小范围直到每一次的推荐都是我感兴趣的内容。初期是很令我兴奋的，因为每一条都是我想看的。但时间一长我打开产品的频次反而降低了，因为在我打开产品之前，我已经“知道”里面是些什么内容，打开产品的欲望就降低了。所以好的推荐算法，既要能给用户推荐“用户已知自己感兴趣”的内容，还要推荐“用户不知自己感兴趣”的内容。</p>
<h2 id="5-投入投入越多越离不开">5、投入，投入越多越离不开</h2>
<p>投入越多越离不开在生活中的说法就是“都有感情了”，这种感情类比到产品中就是各种投入，玩游戏花的时间、网盘中的资料、社交平台的关系等都是投入。各种投入的积累会把用户留在产品中，投入越多，产品中的使用习惯就越多，迁移到其他产品的成本就越高。</p>
<p>所以搭建好的上瘾模型要让用户一点点的往产品中投入，投入的形式与产品形态相关，用户在产品中的任何使用痕迹都可以是一种投入。而产品也可以通过用户的投入来改进产品质量，进而促进用户更多的投入。</p>
<h2 id="6-总结">6、总结</h2>
<p>上瘾模型是一种很好的指导理论，帮助产品经理在产品设计中加入对培养用户使用习惯的设计。培养用户习惯的前提是，用户有真实的需求，且产品可以满足。有无数的产品在初期靠着砸钱都可以让用户每天使用产品，但最后活下来的一定是满足用户真实需求的产品。</p>
]]></content>
    </entry>
</feed>